/* ****************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/*
 * Templates for values.
 */
{namespace dma.value autoescape="false"}

// @function def 1 0
// @function entry 1 0
// @printDirective commands 0 0 
// @printDirective css 0 0 
// @printDirective firstline 0 0 
// @printDirective print 0 0 
// @printDirective raw 0 0 

/**
 * Base template for values to make them editable.
 *
 * @param entry The entry to print for
 * @param value The value to print
 * @param? canEdit True if the value can be edited, false if not
 * @param? related Other related values to edit together
 * @param? content Content for printing the value, uses .print if not given
 * @param? note Text to be displayed when editing
 * @param? prefix The prefix to the value, if any
 * @param? postfix The postfix to the value, if any
 * @param? ifempty The text to print if the value is empty
 *
 */
{template .value}
  {if $value}
    {call .editable}
      {param canEdit: $canEdit and (not $value or $value.isEditable) /}
      {param name: $value.name /}
      {param value: $value.edit /}
      {param key: $entry.key /}
      {param type: $value.type /}
      {param related: $related ? $related : $value.related /}
      {param choices: $value.choices /}
      {param note: $note /}
      {param ifempty: $ifempty /}
      {param content}
        {if $content}
          {if $prefix}{$prefix}{/if}
          {$content}
          {if $postfix}{$postfix}{/if}
        {else}
          {if $value.isDefined}
            {if $prefix}{$prefix}{/if}
            {if def($value.remark)}
              {call dma.value.remark}
                {param value: $value /}
                {param remarkType: $value.remark.type /}
                {param remarkComment: $value.remark.comment /}
              {/call}
            {else}
              {$value |print}
            {/if}
            {if $postfix}{$postfix}{/if}
          {elseif $value.hasExpression}
            {if $prefix}{$prefix}{/if}
            {$value.getExpression}
            {if $postfix}{$postfix}{/if}
          {/if}
        {/if}
      {/param}
    {/call}
  {elseif $content}
    {if $prefix}{$prefix}{/if}
    {$content}
    {if $postfix}{$postfix}{/if}
  {else}
    {if $ifempty}
      {$ifempty}
    {else}
      (not found)
    {/if}
  {/if}
{/template}

/**
 * An editable value.
 *
 * @param? canEdit If the value can be edited at all
 * @param name The name of the value
 * @param value The value as it can be edited
 * @param key The key of the entry being edited
 * @param type The type of value edited
 * @param? related The related values, if any
 * @param? choices The possible choices for the value, if any
 * @param? content The formatted value edited as it is displayed
 * @param? note Text to be displayed when editing
 * @param? ifempty The text to print if empty
 *
 */
{template .editable}
  {if $canEdit}
    <dmaeditable name="{$name}" value="{$value|noAutoescape}" key="{$key}"
      class="editable" type="{$type}"{if $related} related="{$related}"{/if}
      {if $choices} values="{$choices}"{/if}{if $note} note="{$note}"{/if}>
      {if $content or not $ifempty}
        {$content|noAutoescape}
      {else}
        {$ifempty}
      {/if}
    </dmaeditable>
  {else}
    {if $content or not $ifempty}
      {$content|noAutoescape}
    {else}
      {$ifempty}
    {/if}
  {/if}
{/template}

/**
 * A value with a remark.
 *
 * @param value The value to be printed
 * @param remarkType The remark type, if any
 * @param remarkComment The remark comment, if any
 *
 */
{template .remark}
  {if $remarkType}
    <span class="remark {$remarkType |css}">
      {$value |print}
      <div class="remark-window">
        {$remarkComment}
      </div>
    </span>
  {else}
    {$value |print}
  {/if}
{/template}

/**
 * Formatting a link for an index.
 *
 * @param args The template arguments
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .link}
  {call dma.page.link}
    {param url: '/' + $entry.type.multilink + '/' + $args.0 + '/'
        + $value.group /}
    {param text: $value.raw /}
  {/call}
{/template}

/**
 * Formatting a reference.
 *
 * @param args The template arguments
 * @param value The value rendered
 */
{template .reference}
  {call dma.page.link}
    {param url: $args.0 + $value.group /}
    {param text: $value.raw /}
  {/call}
{/template}

/**
 * Format a product reference.
 * 
 * @param reference the product reference
 */
{template .productReference}

  {call dma.page.link}
    {param url: $reference.url /}
    {param text: $reference.title /}
   {/call} 
   {if length($reference.pages)}
     {sp}p.{sp}
     {foreach $page in $reference.pages}
       {$page.toString}{if not isLast($page)}, {/if}
     {/foreach}
   {/if}
{/template}

/**
 * Formatting a link to an entry.
 *
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .entrylink}
  {call dma.page.link}
    {param url: '/' + $entry.type.link + '/' + $value.group /}
    {param text: $value.raw /}
  {/call}
{/template}


/**
 * Formatting a campaign link.
 *
 * @ param entry The entry rendered
 * @param value The value rendered
 */
{template .campaign}
  {call dma.page.link}
    {param url: '/campaign/' + $value.multi.0.print + '/'
        + $value.multi.1.print /}
    {param text: $value.multi.1.print /}
  {/call}
{/template}

/**
 * Formatting an author.
 *
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .person}
  {call dma.page.link}
    {param url: '/' + $entry.type.multilink + '/persons/'
        + $value.multi.0.print /}
    {param text: $value.multi.0.print /}
  {/call}
  {if $value.multi.1}
    {sp}(
    {call dma.page.link}
      {param url: '/' + $entry.type.multilink + '/jobs/'
          + $value.multi.1.print /}
      {param text: $value.multi.1.print /}
    {/call}
    )
  {/if}
{/template}

/**
 * Formatting an content entry.
 *
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .content}
  {call dma.page.link}
    {param url: '/' + $entry.type.multilink + '/parts/'
        + $value.multi.0.print /}
    {param text: $value.multi.0.print /}
  {/call}
  {if $value.multi.1}
    {sp}{$value.multi.1.print}
  {/if}
  {sp}{$value.multi.2.print}
{/template}

/**
 * Formatting the requirements.
 *
 * @ param entry The entry rendered
 * @param value The value rendered
 */
{template .requirements}
  {$value.multi.0.print}
  {if length($value.multi.1.list) > 0}
    <br />
    optional{sp}
    {$value.multi.1.print}
  {/if}
{/template}

/**
 * Template for a money value.
 *
 * @param value the money value
 * @param gold the value in gold pieces (as a Rational)
 */
{template .money}
  <span {if $gold}class="term"{/if}>
    {call dma.page.link}
      {param url: '/items/values/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    {if $gold}<div class="explanation">{$gold.print} gp</div>{/if}
  </span>
{/template}

/**
 * Template for weight values.
 *
 * @param value the weight value
 */
{template .weight}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/values/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <div class="explanation">
      {if $value.isMetric}
        {$value.asPounds |raw}
      {else}
        {$value.asMetric |raw}
      {/if}
    </div>
  </span>
{/template}

/**
 * Template for distance values.
 *
 * @param value the distance value
 */
{template .distance}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/distances/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <span class="explanation">
      {if $value.isMetric}
        {$value.asFeet |raw}
      {else}
        {$value.asMetric |raw}
      {/if}
    </span>
  </span>
{/template}

/**
 * Template for duration values.
 *
 * @param value the duration value
 */
{template .duration}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/durations/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <div class="explanation">
      {if $value.isMetric}
       {$value.asRounds |raw}
      {else}
        {$value.asMetric |raw}
      {/if}
    </div>
  </span>
{/template}

/**
 * Template for volume values.
 *
 * @param value the volume value
 */
{template .volume}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/volumes/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <div class="explanation">
      {if $value.isLiquid}
        {if $value.isMetric}
          {$value.asLiters |raw}
        {else}
          {$value.asGallons |raw}
        {/if}
      {else}
        {if $value.isMetric}
          {$value.asFeet |raw}
        {else}
          {$value.asMetric |raw}
        {/if}
      {/if}
    </div>
  </span>
{/template}

/**
 * Formatting the appearances.
 *
 * @ param entry The entry rendered
 * @param value The value rendered
 */
{template .appearances}
  <table>
    {foreach $appearance in $value.list}
      <tr>
        <td>{$appearance.multi.0 |print}</td>
        <td>-{sp}</td>
        <td>{$appearance.multi.1 |print}</td>
      </tr>
    {/foreach}
  </table>
{/template}

/**
 * Formatting a damage value.
 *
 * @ param entry The entry rendered
 * @param value The value rendered
 * @ param args
 */
{template .damage}
  {call dma.page.link}
    {param url: '/items/damages/' + $value.group /}
    {param text: $value.raw /}
  {/call}
  {if def($value.next)}
    {sp}{$value.next.print}
  {/if}
{/template}

/**
 * Formatting the contains value of a composite extension.
 *
 * @ param entry The entry rendered.
 * @param value The value rendered.
 */
{template .contains}
  {foreach $ands in $value.list}
    {foreach $ors in $ands.list}
      {call dma.page.link}
        {param url: '/item/' + $ors.raw /}
        {param text: $ors.print /}
      {/call}
      {if not isLast($ors)}
        {sp}or{sp}
      {/if}
    {/foreach}
    {if not isLast($ands)}
      {sp}and{sp}
    {/if}
  {/foreach}
{/template}

/**
 * Formatting an extensions value.
 *
 * @ param entry The entry rendered.
 * @param value The value rendered.
 */
{template .extensions}
  {foreach $extension in $value.list}
    {call .extension}
      {param value: $extension.raw /}
    {/call}{sp}
  {/foreach}
{/template}

/**
 * An extension title.
 *
 * @param value The value rendered.
 */
{template .extensionTitle}
  {call .extension data="all" /} - {$value}
{/template}

/**
 * Formatting an extension value.
 *
 * @param value The value rendered.
 */
{template .extension}
  {switch $value}
    {case 'value'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#xa4;' /}
        {param space: 1 /}
      {/call}
    {case 'hp'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2665;' /}
      {/call}
    {case 'weight'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x10137;' /}
      {/call}
    {case 'size'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x21a8;' /}
        {param size: 100 /}
        {param space: 2 /}
      {/call}
    {case 'hardness'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x1d34d;' /}
        {param size: 150 /}
        {param space: 1 /}
      {/call}
    {case 'break'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#xa6;' /}
        {param size: 150 /}
        {param space: 2 /}
      {/call}
    {case 'substance'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x269b;' /}
      {/call}
    {case 'wearable'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x269c;' /}
        {param space: 1 /}
      {/call}
    {case 'multiuse'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2a34;' /}
        {param size: 150 /}
        {param space: 1 /}
      {/call}
    {case 'multiple'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2a35;' /}
        {param size: 150 /}
        {param space: 1 /}
      {/call}
    {case 'counted'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2736;' /}
        {param size: 150 /}
        {param space: 2 /}
      {/call}
    {case 'light'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x263c;' /}
        {param size: 150 /}
        {param space: 2 /}
      {/call}
    {case 'timed'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x27f3;' /}
        {param size: 150 /}
      {/call}
    {case 'commodity'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x25a4;' /}
        {param size: 150 /}
        {param space: 2 /}
      {/call}
    {case 'weapon'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2694;' /}
      {/call}
    {case 'armor'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2602;' /}
        {param size: 150 /}
      {/call}
    {case 'incomplete'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2639;' /}
        {param size: 150 /}
      {/call}
    {case 'composite'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2384;' /}
      {/call}
    {case 'container'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2a4f;' /}
      {/call}
    {case 'composite'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2295;' /}
      {/call}
    {case 'contents'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x25c8;' /}
      {/call}
    {case 'magic'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2734;' /}
      {/call}
    {case 'notes'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x270e;' /}
      {/call}
    {case 'school'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x1f393;' /}
        {param style: 'symbola' /}
      {/call}
    {case 'casting-time'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x23f3;' /}
        {param style: 'symbola' /}
        {param size: 130 /}
      {/call}
    {case 'level'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x1f522;' /}
        {param style: 'symbola' /}
        {param size: 120 /}
        {param space: 2 /}
      {/call}
    {case 'range'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x20d5;' /}
        {param space: 5 /}
      {/call}
    {case 'target'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x1f3af;' /}
        {param style: 'symbola' /}
        {param size: 140 /}
        {param space: 3 /}
      {/call}
    {case 'area'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x1f3af;' /}
        {param style: 'symbola' /}
        {param size: 140 /}
      {/call}
    {case 'components'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2699;' /}
        {param style: 'symbola' /}
        {param size: 140 /}
        {param space: 3 /}
      {/call}
    {case 'focus'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x1f64f;' /}
        {param style: 'symbola' /}
      {/call}
    {case 'duration'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x23f3;' /}
        {param style: 'symbola' /}
        {param size: 130 /}
      {/call}
    {case 'saving-throw'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x1f512;' /}
        {param style: 'symbola' /}
        {param size: 150 /}
      {/call}
    {case 'effect'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x29d0;' /}
      {/call}
    {case 'spell-resistance'}
      {call .extensionsymbol}
        {param value: $value /}
        {param symbol: '&#x2602;' /}
        {param size: 150 /}
      {/call}
    {default}
      <div class="extension-symbol-text">
        {$value}
      </div>
  {/switch}
{/template}

/**
 * Format the given symbol as an extension symbol.
 *
 * @param value The name of the symbol.
 * @param symbol The symbol to set.
 * @param? space The px to add as top margin.
 * @param? size The size in percent of the symbol.
 * @param? style The style to use for the symbol.
 */
{template .extensionsymbol}
  <div title="{$value}" class="extension-symbol{if $style} {$style}{/if}"
    {if $space or $size} style="
      {if $space}margin-top: {$space}px;{/if}
      {if $size} font-size: {$size}%;{/if}
    "{/if}>
    {$symbol}
  </div>
{/template}

/**
 * Formatting of a damage value.
 *
 * @ param entry The entry rendered.
 * @param value The value rendered.
 */
{template .damages}
  {if $value.multi.0.isDefined}
    {$value.multi.0.print}
  {/if}
  {if $value.multi.1.isDefined}
    {sp}/ {$value.multi.1.print}
  {/if}
{/template}

/**
 * Print a value including it's base value.
 *
 * @param entry the entry to render
 * @param value the value rendered
 * @param? canEdit the value can be edited
 * @param? note Text to be displayed when editing
 * @param? prefix the prefix for the value
 * @param? postfix the postfix for the value
 * @param? ifempty text to print if the value is empty
 * @param? short print as a short value
 */
{template .withbase}
  {if def($value.isCombined)}
    {call .combined}
      {param entry: $entry /}
      {param value: $value /}
      {param canEdit: $canEdit /}
      {param note: $note /}
      {param prefix: $prefix /}
      {param postfix: $postfix /}
      {param ifempty: $ifempty /}
      {param short: $short /}
    {/call}
  {else}
    {call .combined}
      {param entry: $entry /}
      {param value: $value.combined /}
      {param canEdit: $canEdit /}
      {param note: $note /}
      {param prefix: $prefix /}
      {param postfix: $postfix /}
      {param ifempty: $ifempty /}
      {param short: $short /}
    {/call}
  {/if}
{/template}

/**
 * Print a value list.
 *
 * @param value the value to print
 * @param args arguments to the template
 */
{template .list}
  {foreach $element in $value.list}
    {$element |print}
    {if not isLast($element)}{$args[0]}{/if}
  {/foreach}
{/template}

/**
 * Print a multiple value.
 *
 * @param value the value to print
 * @param args arguments to the template
 */
{template .multiple}
  {foreach $element in $value.multi}
    {if $element.isDefined}
      {if $args[index($element) * 2]}
        {$args[index($element) * 2]}
      {else}
        {sp}
      {/if}
      {$element |print}
      {if $args[index($element) * 2 + 1]}
        {$args[index($element) * 2 + 1]}
      {/if}
    {/if}
  {/foreach}
{/template}

/**
 * Print a text value with command substitution.
 *
 * @param value the value to print
 */
{template .text}
  {$value |commands}
{/template}

/**
 * A condition to a modifier.
 *
 * @param value the condition value
 *
 */
{template .condition}
  <em>{$value |raw}</em>
{/template}

/**
 * Print a modifier value.
 *
 * @param value the value to print
 * @ param args arguments to the template
 */
{template .modifier}
  {$value |raw}
{/template}

/**
 * Print a modified number value.
 *
 * @param value the value to print
 * @ param args arguments to the template
 */
{template .modifiednumber}
  <span class="windowed">
    <span class="window base">
      {if $value.modifier}Modifier: {$value.modifier |print}<br /><br />{/if}
      {foreach $name in keys($value.modifiers)}
        <span class="base-value">{$value.modifiers[$name] |print}</span>
        {sp} from {$name}
        <br />
      {/foreach}
    </span>
    {$value |raw}
  </span>
{/template}

/**
 * Print a daily references value.
 *
 * @param value the value to print
 * @ param args arguments to the template
 */
{template .dailyreferences}
  {foreach $ref in $value.list}
    {$ref.multi.0 |print}
    {if $ref.multi.1.isDefined and $ref.multi.1.print != '1'}
      {sp}{$ref.multi.1 |print} times per day
    {/if}
    : {entry($ref.multi.0.print)}
  {if not isLast($ref)}<br/>{/if}
  {/foreach}
{/template}

/**
 * Print a combined value.
 *
 * @param entry The entry to print for
 * @param value The value to print
 * @param? canEdit True if the value can be edited, false if not
 * @param? related Other related values to edit together
 * @param? content Content for printing the value, uses .print if not given
 * @param? note Text to be displayed when editing
 * @param? prefix The prefix to the value, if any
 * @param? postfix The postfix to the value, if any
 * @param? ifempty The text to print if the value is empty
 * @param? short Print as a short value
 */
{template .combined}
  {if $value}
    {call .editable}
      {param canEdit: $canEdit and (not $value or $value.isEditable) /}
      {param name: $value.isEditable ? $value.name : 'unknown' /}
      {param value: $value.isEditable ? $value.edit : '' /}
      {param key: $entry.key /}
      {param type: $value.isEditable ? $value.type : 'unknown' /}
      {param related: $related ? $related :
          $value.isEditable ? $value.related : '' /}
      {param choices: $value.isEditable ? $value.choices : ''/}
      {param note: $note /}
      {param ifempty: $ifempty /}
      {param content}
        {if $content}
          {if $prefix}{$prefix}{/if}
          {$content}
          {if $postfix}{$postfix}{/if}
        {else}
          {if $prefix}{$prefix}{/if}
          {if def($value.remark)}
            {call dma.value.remark}
              {param value: $value /}
              {param remarkType: $value.remark.type /}
              {param remarkComment: $value.remark.comment /}
            {/call}
          {/if}
          {if isList($value.valuesWithDescriptions)}
            {foreach $val in $value.valuesWithDescriptions}
              <span class="windowed">
                <div class="window base">
                  <table class="bases">
                    {foreach $desc in $val.second}
                      <tr class="base-entry">
                        <td class="base-value">
                          {$desc.first |firstline}
                        </td>
                        <td class="base-name">
                          {$desc.second}
                        </td>
                      </tr>
                    {/foreach}
                  </table>
                </div>
                {if $short}
                  {$val.first.short}
                {else}
                  {$val.first |print}
                {/if}
                {if not isLast($val)}{sp}{/if}
              </span>
            {/foreach}
            {if $value.hasModifiers}
              {$value.modifier |print}
            {/if}
          {/if}
          {if $postfix}{$postfix}{/if}
        {/if}
      {/param}
    {/call}
  {elseif $content}
    {if $prefix}{$prefix}{sp}{/if}
    {$content}
    {if $postfix}{$postfix}{sp}{/if}
  {else}
    {if $ifempty}
      {$ifempty}
    {else}
      (not found)
    {/if}
  {/if}
{/template}