/******************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/**
 * Templates for values.
 */
{namespace dma.value autoescape="false"}

/**
 * Base template for values to make them editable.
 *
 * @param entry The entry to print for
 * @param value The value to print
 * @param canEdit True if the value can be edited, false if not
 * @param related Other related values to edit together
 * @param content Content for printing the value, uses .print if not given
 */
{template .value}
  {call .editable}
    {param canEdit: $canEdit and (not $value or $value.isEditable) /}
    {param name: $value.name /}
    {param value: $value.edit /}
    {param key: $entry.key /}
    {param type: $value.type /}
    {param related: $related ? $related : $value.related /}
    {param choices: $value.choices /}
    {param content}
      {if $content}
        {$content}
      {else}
        {if $value.isDefined}
          {if $value.remark}
            {call dma.value.remark}
              {param value: $value /}
              {param remarkType: $value.remark.type /}
              {param remarkComment: $value.remark.comment /}
            {/call}
          {else}
            {$value |print}
          {/if}
        {elseif $value.hasExpression}
          {$value.getExpression}
        {else}
          &nbsp;
        {/if}
      {/if}
    {/param}
  {/call}
{/template}

/**
 * An editable value.
 *
 * @param canEdit If the value can be edited at all
 * @param name The name of the value
 * @param value The value as it can be edited
 * @param key The key of the entry being edited
 * @param type The type of value edited
 * @param related The related values, if any
 * @param choices The possible choices for the value, if any
 * @param content The formatted value edited as it is displayed
 *
 */
{template .editable}
  {if $canEdit}
    <dmaeditable name="{$name}" value="{$value|noAutoescape}" key="{$key}"
      class="editable" type="{$type}"{if $related} related="{$related}"{/if}
      {if $choices} values="{$choices}"{/if}>
      {$content|noAutoescape}
    </dmaeditable>
  {else}
    {$content|noAutoescape}
  {/if}
{/template}

/**
 * A value with a remark.
 *
 * @param value The value to be printed
 * @param remarkType The remark type, if any
 * @param remarkComment The remark comment, if any
 *
 */
{template .remark}
  {if $remarkType}
    <span class="remark {$remarkType |css}">
      {$value |print}
      <div class="remark-window">
        {$remarkComment}
      </div>
    </span>
  {else}
    {$value |print}
  {/if}
{/template}

/**
 * Formatting a link for an index.
 *
 * @param args The template arguments
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .link}
  {call dma.page.link}
    {param url: '/' + $entry.type.multilink + '/' + $args.0 + '/'
        + $value.group /}
    {param text: $value.raw /}
  {/call}
{/template}

/**
 * Formatting a link to an entry.
 *
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .entrylink}
  {call dma.page.link}
    {param url: '/' + $entry.type.link + '/' + $value.group /}
    {param text: $value.raw /}
  {/call}
{/template}


/**
 * Formatting a link.
 *
 * @ param entry The entry rendered
 * @param value The value rendered
 */
{template .campaign}
  {call dma.page.link}
    {param url: '/campaign/' + $value.multi.0.print + '/'
        + $value.multi.1.print /}
    {param text: $value.multi.1.print /}
  {/call}
{/template}

/**
 * Formatting an author.
 *
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .person}
  {call dma.page.link}
    {param url: '/' + $entry.type.multilink + '/persons/'
        + $value.multi.0.print /}
    {param text: $value.multi.0.print /}
  {/call}
  {if $value.multi.1}
    {sp}(
    {call dma.page.link}
      {param url: '/' + $entry.type.multilink + '/jobs/'
          + $value.multi.1.print /}
      {param text: $value.multi.1.print /}
    {/call}
    )
  {/if}
{/template}

/**
 * Formatting an content entry.
 *
 * @param entry The entry rendered
 * @param value The value rendered
 */
{template .content}
  {call dma.page.link}
    {param url: '/' + $entry.type.multilink + '/parts/'
        + $value.multi.0.print /}
    {param text: $value.multi.0.print /}
  {/call}
  {if $value.multi.1}
    {sp}{$value.multi.1.print}
  {/if}
  {sp}{$value.multi.2.print}
{/template}

/**
 * Formatting the requirements.
 *
 * @ param entry The entry rendered
 * @param value The value rendered
 */
{template .requirements}
  {$value.multi.0.print}
  {if length($value.multi.1.list) > 0}
    <br />
    optional{sp}
    {$value.multi.1.print}
  {/if}
{/template}

/**
 * Formatting a product reference.
 *
 * @param id the id of the reference
 * @param name the name of the reference product
 */
{template .reference}
  {call dma.page.link}
    {param url: '/product/' + $id /}
    {param text: $name + ' (' + $id + ')' /}
  {/call}
{/template}

/**
 * Template for a money value.
 *
 * @param value the money value
 * @param gold the value in gold pieces (as a Rational)
 */
{template .money}
  <span {if $gold}class="term"{/if}>
    {call dma.page.link}
      {param url: '/items/values/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    {if $gold}<div class="explanation">{$gold.print} gp</div>{/if}
  </span>
{/template}

/**
 * Template for weight values.
 *
 * @param value the weight value
 */
{template .weight}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/values/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <div class="explanation">
      {if $value.isMetric}
        {$value.asPounds |raw}
      {else}
        {$value.asMetric |raw}
      {/if}
    </div>
  </span>
{/template}

/**
 * Template for distance values.
 *
 * @param value the distance value
 */
{template .distance}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/distances/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <div class="explanation">
      {if $value.isMetric}
        {$value.asFeet |raw}
      {else}
        {$value.asMetric |raw}
      {/if}
    </div>
  </span>
{/template}

/**
 * Template for duration values.
 *
 * @param value the duration value
 */
{template .duration}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/durations/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <div class="explanation">
      {if $value.isMetric}
       {$value.asRounds |raw}
      {else}
        {$value.asMetric |raw}
      {/if}
    </div>
  </span>
{/template}

/**
 * Template for volume values.
 *
 * @param value the volume value
 */
{template .volume}
  <span class="term">
    {call dma.page.link}
      {param url: '/items/volumes/' + $value.group /}
      {param text: $value.raw /}
    {/call}
    <div class="explanation">
      {if $value.isLiquid}
        {if $value.isMetric}
          {$value.asLiters |raw}
        {else}
          {$value.asGallons |raw}
        {/if}
      {else}
        {if $value.isMetric}
          {$value.asFeet |raw}
        {else}
          {$value.asMetric |raw}
        {/if}
      {/if}
    </div>
  </span>
{/template}

/**
 * Formatting the appearances.
 *
 * @ param entry The entry rendered
 * @param value The value rendered
 */
{template .appearances}
  <table>
    {foreach $appearance in $value.list}
      <tr>
        <td>{$appearance.multi.0 |print}</td>
        <td>-{sp}</td>
        <td>{$appearance.multi.1 |print}</td>
      </tr>
    {/foreach}
  </table>
{/template}

/**
 * Formatting a damage value.
 *
 * @ param entry The entry rendered
 * @ param value The value rendered
 * @param base The base damage value
 * @param type The damage type
 * @param effect The damage effect, if any
 * @param other Other damage, if any
 */
{template .damage}
  {call dma.page.link}
    {param ulr: '/items/damages/' + $base.group /}
    {param text: $base.print /}
  {/call}
  {if $type and $type.isDefined}
    {sp}{$type.print}
  {/if}
  {if $effect}
    {sp}{$effect}
  {/if}
  {if $other}
    {sp}{$other.print}
  {/if}
{/template}

/**
 * Formatting the contains value of a composite extension.
 *
 * @ param entry The entry rendered.
 * @param value The value rendered.
 */
{template .contains}
  {foreach $ands in $value.list}
    {foreach $ors in $ands.list}
      {call dma.page.link}
        {param url: '/item/' + $ors.raw /}
        {param text: $ors.print /}
      {/call}
      {if not isLast($ors)}
        {sp}or{sp}
      {/if}
    {/foreach}
    {if not isLast($ands)}
      {sp}and{sp}
    {/if}
  {/foreach}
{/template}

/**
 * Formatting an extensions value.
 *
 * @ param entry The entry rendered.
 * @param value The value rendered.
 */
{template .extensions}
  {foreach $extension in $value.list}
    {$extension.print}{sp}
  {/foreach}
{/template}

/**
 * Formatting an extension value.
 *
 * @ param entry The entry rendered.
 * @param value The value rendered.
 */
{template .extension}
  <span title="{$value.raw}" class="extension-symbol">
    {switch $value.raw}
      {case 'armor'}
        {literal}&#x2602;{/literal}
      {case 'counted'}
        {literal}&#x2736;{/literal}
      {case 'incomplete'}
        {literal}&#x2639;{/literal}
      {case 'light'}
        {literal}&#x263c;{/literal}
      {case 'commodity'}
        {literal}&#x25a4;{/literal}
      {case 'timed'}
        {literal}&#x27f3;{/literal}
      {case 'weapon'}
        {literal}&#x2694;{/literal}
      {case 'wearable'}
        {literal}&#x269c;{/literal}
      {case 'composite'}
        {literal}&#x2384;{/literal}
      {case 'multiple'}
        {literal}&#x2a35;{/literal}
      {case 'multiuse'}
        {literal}&#x2a34;{/literal}
      {case 'container'}
        {literal}&#x2a4f;{/literal}
      {default}
        {$value.raw}
    {/switch}
  </span>
{/template}

/**
 * Formatting of a damage value.
 *
 * @ param entry The entry rendered.
 * @param value The value rendered.
 */
{template .damages}
  {if $value.multi.0.isDefined}
    {$value.multi.0.print}
  {/if}
  {if $value.multi.1.isDefined}
    {sp}/ {$value.multi.1.print}
  {/if}
{/template}

/**
 * Formatting a combination value.
 *
 * @param combination the combination value
 */
{template .combination}
  {if $combination.total}
    {if $combination.bases and length($combination.bases) > 0}
      {if $combination.bases[0].isLongText}
        {if $ij.isDM}
          <div class="longtext">
            {foreach $base in $combination.bases}
              {if $base.value.isDefined}
                <div class="base-title">
                  <span class="base-text">from {$base.names}</span>
                </div>
                {$base.value |print}
              {/if}
            {/foreach}
          </div>
        {/if}
      {elseif $combination.bases[0].isText}
        {foreach $base in $combination.bases}
          {if $base.value.isDefined}
            {if not isFirst($base) or $combination.isDefined}
              {sp}|{sp}
            {/if}
            <span class="windowed">
              <span class="window base">
                from {$base.names}
              </span>
              {$base.value |print}
            </span>
          {/if}
        {/foreach}
      {else}
        {if $ij.isDM}
          <span class="windowed">
            <span class="window base">
              {foreach $base in $combination.bases}
                {if $base and $base.value}
                  <span class="base-value">{$base.value |print}</span>
                  {sp} from {$base.names}
                  <br />
                {elseif $base.expression}
                  {$base.expression} from {$base.names}
                {else}
                  undefined value from {$base.names}
                {/if}
              {/foreach}
            </span>
            <i>{$combination.total|print}</i>
          </span>
        {else}
          {$combination.total|print}
        {/if}
      {/if}
    {/if}
  {/if}
{/template}

/**
 * Print a value including it's base value.
 *
 * @param entry the entry to render
 * @param value the value rendered
 * @param canEdit the value can be edited
 */
{template .withbase}
  {call dma.value.value}
    {param entry: $entry /}
    {param value: $value /}
    {param canEdit: $canEdit /}
  {/call}
  {if $value.combine}
    {call dma.value.combination}
      {param combination: $value.combine /}
    {/call}
  {/if}
{/template}

/**
 * Print a value list.
 *
 * @param value the value to print
 * @param args arguments to the template
 */
{template .list}
  {foreach $element in $value.list}
    {$element |print}
    {if not isLast($element)}{$args[0]}{/if}
  {/foreach}
{/template}

/**
 * Print a text value with command substitution.
 *
 * @param value the value to print
 */
{template .text}
  {$value |commands}
{/template}