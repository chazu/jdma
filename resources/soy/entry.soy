/* ****************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/*
 * The basic templates for rendering entries.
 */

{namespace dma.entry autoescape="deprecated-noautoescape"}

// @function def 1 0
// @function entry 1 0

/**
 * Show the entry.
 * 
 * @param entry The entry to show
 * @param type The entry type to use
 * @param values The values to show
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 * @param color the color for highlights
 * @param? title the special title, if any
 * @param? noprint whether to print this or not
 */
{template .show}
  <div class="show entry {$type}{if $noprint} no-print{/if}">

    {call dma.entry.toolbar}
      {param entry: $entry /}
    {/call}

    {if not $ij.params.card}
      {call dma.entry.navigation}
        {param first: $first /}
        {param previous: $previous /}
        {param list: $list /}
        {param next: $next /}
        {param last: $last /}
      {/call}
      {call dma.navigation.navigation}
        {param entries:
            [
              [ 'label': $entry.type.link, 'url': '/' + $entry.type.multilink ],
              [ 'label': $entry.name, 'url': $entry.path ]
            ] /}
      {/call}
    {/if}

    <div class="_new_ images">
      {call dma.entry.mainImage}
        {param entry: $entry /}
      {/call}
        
      {foreach $file in $entry.all_files}
        {call dma.entry.file}
          {param file: $file /}
        {/call}
      {/foreach}
    </div>

    <div class="values">

       {if $title}
         {$title}
       {else}
         {call dma.entry._new_title}
           {param title: $entry.name /}
           {param color: $color /}
         {/call}
       {/if}
       
      {if def($entry.description)}
        <div class="_new_value _new_description">
          {commands(annotate($entry.combined_description))}
        </div>
      {/if}
        
      {if def($entry.short_description)}
        <div class="_new_value _new_short-description">
          {commands(annotate($entry.combined_short_description))}
        </div>
      {/if}

       <div class="_new_values">
         {$values} 
       </div>
       
      <div class="clear"></div>
    </div>
    
    {if not $ij.params.card}
      {call dma.entry.navigation}
        {param first: $first /}
        {param previous: $previous /}
        {param list: $list /}
        {param next: $next /}
        {param last: $last /}
      {/call}
    {/if}
    {literal}
      <script>
        $(document).ready(function()
        {
          $('DIV.files IMG.image')
            .mouseover(util.replaceMainImage)
            .mouseout(util.restoreMainImage);
        });
      </script>
    {/literal}

    {if $ij.isDev}  
      <pre>
        {$entry.toProto.toString}
      </pre>
    {/if}
  </div>
{/template}

/**
 * Show the toolbar with the avaialable actions.
 * 
 * @param entry The entry to show the toolbar for
 */
{template .toolbar}
  <div class="toolbar">
    <div class="actions">
      <div class="action sprite large edit"
           onclick="edit.show('{$entry.name|escapeJsString}', 
                              '{$entry.path|escapeJsString}', 
                'edit-{$entry.type.css}-{escape($entry.name)|escapeJsString}')">
      </div>
      <div class="action sprite large delete"
           onclick="if(confirm('Do you really want to delete this?'))
                      util.ajax('/actions/remove',
                               {lb} key: '{$entry.key |escapeJs}' {rb},
                               null, true);">
      </div> 
    </div>
  </div>
{/template}

/** The main title.
 * 
 * @param title The text of the title
 * @param color The color of the title
 */
{template ._new_title}
  <div class="title-container">
  <span class="title" style="color: {$color}">
    {$title}
   <div class="decoration"
        style="background: -webkit-linear-gradient(right, transparent 0%, {$color} 100%);">
    </div>
  </span>
  </div>
{/template}

/** The sub title.
 * 
 * @param title The text of the title
 */
{template ._new_subtitle}
  <div class="subtitle">
    {$title}
  </div>
{/template}

/**
 * The main image of an entry.
 *
 * @param entry The entry formatted.
 * @param? size The size of the image
 */
{template .mainImage}
  {if def($entry.main_file)}
    {call dma.page.link}
      {param url: $entry.main_file.path /}
      {param tooltip: 'Main' /}
      {param class: 'image-link' /}
      {param text}
        <img src="{$entry.main_file.icon}=s{if $size}{$size}{else}100{/if}"
          alt="Main" class="_new_ _new_image _new_main" />
      {/param}
    {/call}
  {else}
    {call dma.page.link}
      {param url: '#' /}
      {param tooltip: 'Main' /}
      {param class: 'image-link' /}
      {param text}
        <img src="/icons/{$entry.type.multilink}-dummy.png" alt="Main"
        class="_new_ _new_image _new_main"
        {if $size}
          {sp}style="max-width: {$size}px; max-height: {$size}px;"
        {else}
          {sp}style="max-width: 100px; max-height: 100px;"
        {/if} />
      {/param}
    {/call}
  {/if}
{/template}

/**
 * An image for the entry.
 * 
 * @param file The image shown
 * @param? size The size of the image
 */
{template .file}
  {call dma.page.link}
    {param url: $file.path /}
    {param tooltip: $file.name /}
    {param class: 'image-link' /}
    {param text}
      <img src="{$file.icon}=s{if $size}{$size}{else}100{/if}"
        alt="{$file.name}" class="_new_ _new_image other" id="file=-other" />
    {/param}
  {/call}
{/template}

/** An entry value.
 * 
 * @param label The value label.
 * @param value The value's value.'
 * @param color The color for display.
 */
{template .value}
  <div class="_new_value">
    <div class="_new_value-label" style="color:{$color}">
      {$label}:
    </div>
    <div class="_new_value-content">
      {$value}
    </div>
  </div>
{/template}

/**
 * Formatting a list of entries.
 *
 * @param title The list title.
 * @param start The start index
 * @param pagesize The size of the page
 * @param size The number of entries shown
 * @param titles An array with the list title names
 * @param entries The entries printed
 * @param label The navigation label for this page
 * @param path The path to this page
 *
 */
{template .newlist}
  <h1>{$title}</h1>
  {call dma.page.title}
    {param title: $title /}
  {/call}

  {call dma.navigation.navigation}
    {param entries: [[ 'label': $label, 'url': $path ]] /}
  {/call}
  {call dma.entry.listnav}
    {param start: $start /}
    {param pagesize: $pagesize /}
    {param size: $size /}
  {/call}

  {if $entries}
    <table class="entrylist">
      <tr class="title">
        {foreach $listTitle in $titles}
          {call .listtitle}{param title: $listTitle /}{/call}
        {/foreach}
      </tr>
      {$entries}
    </table>
    {call dma.entry.listnav}
      {param start: $start /}
      {param pagesize: $pagesize /}
      {param size: $size /}
    {/call}
  {else}
    <div class="error">No entries found!</div>
  {/if}
{/template}

/**
 * Template for a single list entry.
 * 
 * @param path The path to the value for selection
 * @param values The values for the list entry.
 */
{template .newListEntry}
  <tr onclick="util.link(event, '{$path}')">
    {foreach $value in $values}
      <td class="list">{$value}</td>
    {/foreach}          
  </tr>   
{/template}

/**
 * Format an addable, combined value.
 * 
 * @param  addable the addable value
 * @param? value   the normal value
 * @param?  short   whether to print short
 */
{template .added}
  {if $value.present}
    {if $short}
      {$value.short_string}
    {else}
      {if $value.get.pure_string and def($value.get.pure_string)}
        {$value.get.pure_string}
      {else}
        {$value.get}
      {/if}
    {/if}
  {else}
    <span class="combination-value">
      {if $short}
        {$addable.value_short_string}
      {else}
        {$addable.value_string}
      {/if}
      <div class="combination-sources">
        {foreach $annotated in $addable.annotate}
          <div class="combination-source">
            <span class="combination-source-value">
              {if $annotated.value.present and $annotated.value.get.string}
                {$annotated.value.get.string}
              {else}
                {if $annotated.value.present}
                  {$annotated.value.get}
                {else}
                  x {$annotated.factor}
                {/if}
              {/if}
            </span>
            <span class="combination-source-origin">
              from {$annotated.source}
            </span>
          </div>
        {/foreach}
      </div>
    </span>
  {/if}
{/template}

/**
 * Format an max/min, combined value.
 * 
 * @param combination the combination value
 */
{template .single}
  {if not length($combination.annotate)}
    {$combination.value_string}  
  {else}
    {if $combination.value_string != 'Unknown'}
      <span class="combination-value">
        {$combination.value_string}
        <div class="combination-sources">
          {foreach $annotated in $combination.annotate}
              <div class="combination-source">
                <span class="combination-source-value">
                  {if $annotated.value and $annotated.value.string}
                    {$annotated.value.string}
                  {else}
                    {$annotated.value}
                  {/if}
                </span>
                <span class="combination-source-origin">
                  from {$annotated.source}
                </span>
              </div>
          {/foreach}
        </div>
      </span>
    {/if}
  {/if}
{/template}

/**
 * Format a concatenated, combined value.
 * 
 * @param? value       the normal value
 * @param  concatenate the concatenate value
 * @param? lines      whether to format the text in lines
 */
{template .concatenated}
  {if $value}
    {commands($value)}
  {else}
    {foreach $concat in $concatenate.annotate}
      <span class="combination-{if $lines}line{else}text{/if}">
        {if $concat.value.present}
          {commands($concat.value.get)}
        {else}
          {commands($concat.value)}
        {/if}
        {if not $lines}{sp}{/if}
        <div class="combination-text-source">
          from {$concat.source}
        </div>
      </span>
    {/foreach}
  {/if}
{/template}

/**
 * Format a concatenated, combined value.
 * 
 * @param values       the normal value
 * @param concatenate the concatenate value
  */
{template .concatenated_list}
  {if $values and length($values)}
    {foreach $value in $values}
      {$value}{if not isLast($value)}, {/if}
    {/foreach}
 {else}
    <span class="combination-value">
      {call dma.value.list}
        {param values: $concatenate.value /}
      {/call}
      <div class="combination-sources">
        {foreach $annotated in $concatenate.annotate}
          <div class="combination-source">
            <span class="combination-source-value">
              {call dma.value.list}
                {param values: $annotated.value /}
              {/call}
            </span>
            <span class="combination-source-origin">
              from {$annotated.source}
            </span>
          </div>          
        {/foreach}
      </div>
    </span>
  {/if}
{/template}


// The old templates are below
// *****************************************************************************

/**
 * The main template for an entry.
 *
 * @param entry the entry to format
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 *
 */
{template .container}
  {if $ij.params.card and $ij.params.body}
    {delcall dma.entry.page}
      {param entry: $entry /}
    {/delcall}
  {else}
    {call .navigation}
      {param first: $first /}
      {param previous: $previous /}
      {param list: $list /}
      {param next: $next /}
      {param last: $last /}
    {/call}
    {delcall dma.entry.page}
      {param entry: $entry /}
    {/delcall}
    {call .navigation}
      {param first: $first /}
      {param previous: $previous /}
      {param list: $list /}
      {param next: $next /}
      {param last: $last /}
    {/call}
    {literal}
    <script>
      $(document).ready(function()
      {
        $('DIV.files IMG.image')
          .mouseover(util.replaceMainImage)
          .mouseout(util.restoreMainImage);
      });
    </script>
    {/literal}
  {/if}
{/template}

/**
 * The container for dma output entries.
 *
 * @param entry the entry to format
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 *
 */
{template .dmacontainer}
  {call .navigation}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
  {/call}
  <pre>
    {$entry.dma}
  </pre>
  {call .navigation}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
  {/call}
{/template}

/**
 * The container for deep dma output entries.
 *
 * @param entry the entry to format
 *
 */
{template .dmadeepcontainer}
  {$entry.deepdma}
{/template}

/**
 * The container for printing entries.
 *
 * @param entry the entry to format
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 *
 */
{template .printcontainer}
  {delcall dma.entry.print}
    {param entry: $entry /}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
  {/delcall}
{/template}

/**
 * The container for entry summaries.
 *
 * @param entry the entry to format
 *
 */
{template .summarycontainer}
  {delcall dma.entry.summary}
    {param entry: $entry /}
  {/delcall}
{/template}

/**
 * The template for printing entries.
 *
 * @param entry the entry to format
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 *
 */
{deltemplate dma.entry.print}
  {call .container}
    {param entry: $entry /}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
  {/call}
{/deltemplate}

/**
 * The template for an entry summary.
 *
 * @param entry the entry to format
 *
 */
{deltemplate dma.entry.summary}
  <div class="summary">
    <h1>{$entry.dmName} ({$entry.name})</h1>
  </div>
{/deltemplate}

/**
 * The entry navigation.
 *
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 *
 */
{template .navigation}
  <div class="entry-nav">
    {call .navigationEntry}
      {param url: $first /}
      {param style: 'first' /}
      {param tooltip: 'First' /}
    {/call}
    {call .navigationEntry}
      {param url: $previous /}
      {param style: 'previous' /}
      {param tooltip: 'Previous' /}
    {/call}
    {call .navigationEntry}
      {param url: $list /}
      {param style: 'index' /}
      {param tooltip: 'Index' /}
    {/call}
    {call .navigationEntry}
      {param url: $next /}
      {param style: 'next' /}
      {param tooltip: 'Next' /}
    {/call}
    {call .navigationEntry}
      {param url: $last /}
      {param style: 'last' /}
      {param tooltip: 'Last' /}
    {/call}
  </div>
{/template}

/**
 * A single navigation entry.
 *
 * @param url The url to link to
 * @param style Style to use for the link
 * @param tooltip tooltip text
 */
{template .navigationEntry}
  {call dma.page.link}
    {param url: $url /}
    {param tooltip: $tooltip /}
    {param text}
      <div class="{$style} sprite{if not $url} disabled{/if}"></div>
    {/param}
  {/call}
{/template}

/**
 * Ask the user if an entry should be created.
 *
 * @param id The id of the entry to find
 * @param type The type of the entry
 */
{template .create}
  {call dma.errors.error}
    {param title}
      Entry Not Found
    {/param}
    {param message}
      The entry '{$id}' typed '{$type}' could not be found.
    {/param}
  {/call}
  {if $ij.user}
    <script>
      if(confirm('The desired entry does not exist!\n\n' +
          'Do you want to create a new entry with id \'{$id}\'?'))
        location.href = location.href.replace(/\?.*$/, '') + '?create';
    </script>
  {/if}
{/template}

/**
 * The contents part of the page.
 *
 * @param entry The entry rendered.
 */
{deltemplate dma.entry.page}
  {call dma.entry.default_page}
    {param entry: $entry /}
  {/call}
{/deltemplate}

/**
 * The default contents part of the page.
 *
 * @param entry The entry rendered.
 */
{template .default_page}
  {if $entry.isBase}
    {call dma.navigation.navigation}
      {param entries:
          [[ 'label': $entry.type.link, 'url': '/' + $entry.type.multilink ],
          [ 'label': $entry.name, 'url': $entry.path ]] /}
    {/call}
  {else}
    {call dma.navigation.entryNavigation}
      {param entry: $entry /}
    {/call}
  {/if}
  <div class="leading">
    {delcall dma.entry.files.main}
      {param entry: $entry /}
    {/delcall}
    <div class="entrytitle">
      <div class="title-actions">
        {if $ij.isDM}
          <script>
            gui.addAction('delete', 'Delete',
                           function() {lb}
                               if(confirm('Do you really want to delete this?'))
                                 util.ajax('/actions/remove',
                                   {lb} key: '{$entry.key |escapeJs}' {rb},
                                   null,
                                   true);
                           {rb});
            gui.addAction('edit', 'Edit', 
                          function() {lb}
                            edit.show('{$entry.name}', '{$entry.path}', 
                                      'edit-{$entry.type.css}-{escape($entry.name)}');
                          {rb});
          </script>
          {call dma.page.link}
            {param url: $entry.name + '.summary' /}
            {param text}
              <div class="caption-container">
                <div class="summary sprite large"></div>
                <div>summary</div>
              </div>
            {/param}
          {/call}
          {call dma.page.link}
            {param url: $entry.name + '.dma' /}
            {param text}
              <div class="caption-container">
                <div class="document sprite large"></div>
                <div>dma</div>
              </div>
            {/param}
          {/call}
        {/if}
        {call dma.page.link}
          {param url: $entry.name + '.print' /}
          {param text}
            <div class="caption-container">
              <div class="print sprite large"></div>
              <div>print</div>
            </div>
          {/param}
        {/call}
      </div>
      {delcall dma.entry.title}
        {param entry: $entry /}
      {/delcall}
      <div class="description">
        {call dma.value.withbase}
          {param canEdit: $ij.isDM /}
          {param entry: $entry /}
          {param value: $entry.description /}
          {param ifempty: '(no description)' /}
        {/call}
      </div>
      <div class="short-description">
        {call dma.value.withbase}
          {param canEdit: $ij.isDM /}
          {param entry: $entry /}
          {param value: $entry.short_description /}
          {param ifempty: '(no short description)' /}
        {/call}
      </div>
    </div>
  </div>
  <div id="files" class="files">
    {call dma.value.editable}
      {param canEdit: $ij.isDM /}
      {param name: 'files' /}
      {param value: 'files' /}
      {param key: $entry.key /}
      {param type: 'files' /}
      {param content}
        <div id="files" class="files">
          {foreach $file in $entry.files.other}
            <div class="file">
              <img src="{if $file.type == 'application/pdf'}/icons/pdf.png
                        {else}{$file.icon}=s50{/if}" alt="{$file.name}"
                   class="image file"
                   onclick="util.link(event, '{$file.icon}')" />
            </div>
          {ifempty}
            <div class="nofiles"></div>
          {/foreach}
        </div>
      {/param}
    {/call}
  </div>
  <div class="values clear">
    {delcall dma.entry.values}
      {param entry: $entry /}
    {/delcall}
  </div>
{/template}

/**
 * The values for the entry.
 *
 * @param entry The entry rendered
 */
{deltemplate dma.entry.values}
  No values in this entry ({$entry.name}).
{/deltemplate}

/**
 * The main image of an entry.
 *
 * @param entry The entry formatted.
 * @param? size The size of the image
 */
{deltemplate dma.entry.files.main}
  {call dma.value.editable}
    {param canEdit: $ij.isDM or $ij.isOwner /}
    {param name: 'image'/}
    {param value: 'main'/}
    {param key: $entry.key /}
    {param type: 'image'/}
    {param content}
      {if def($entry.files.main)}
        {call dma.page.link}
          {param url: $entry.files.main.path /}
          {param tooltip: 'Main' /}
          {param text}
            <img src="{$entry.files.main.icon}=s{if $size}{$size}{else}300{/if}"
              alt="Main" class="image main" id="file=-main" />
          {/param}
        {/call}
      {else}
        {call dma.page.link}
          {param url: '' /}
          {param tooltip: 'Main' /}
          {param text}
            <img src="/icons/{$entry.type.multilink}-dummy.png" alt="Main"
            class="image main" id="file=-main"
            {if $size}
              {sp}style="max-width: {$size}px; max-height: {$size}px;"
            {/if} />
          {/param}
        {/call}
      {/if}
    {/param}
  {/call}
{/deltemplate}

/**
 * Template for the main icon.
 *
 * @param entry The entry to use.
 * @param? size The size of the image
 */
{template .simplemainfile}
  {if def($entry.files.main)}
    <img src="{$entry.files.main.icon}=s{if $size}{$size}{else}300{/if}"
      alt="Main" class="image main" id="file=-main" />
  {else}
    <img src="/icons/{$entry.type.multilink}-dummy.png" alt="Main"
    class="image main" id="file=-main"
    {if $size}
      {sp}style="max-width: {$size}px; max-height: {$size}px;"
    {/if} />
  {/if}
{/template}

/**
 * The entry title.
 *
 * @param entry The entry rendered.
 */
{deltemplate dma.entry.title}
  <h1>
    {call dma.value.editable}
      {param canEdit: $ij.isDM or $ij.isOwner /}
      {param name: 'name' /}
      {param value: $entry.name /}
      {param key: $entry.key /}
      {param type: 'name' /}
      {param content: $entry.name /}
    {/call}
  </h1>
  {call dma.page.title}
    {param title: $entry.name /}
  {/call}
{/deltemplate}

/**
 * Printing a descriptive key value pair.
 *
 * @param entry The entry rendered.
 * @param name The name of the value.
 * @param? value The value to print.
 * @param? withoutbase true if setting without base, false if setting with
 * @param? content The content if not using a value.
 * @param? access One of dm, owner, admin.
 * @param? noedit If given, value cannot be edited
 * @param? note The not to be displayed on edit, if any
 */
{deltemplate dma.entry.keyvalue}
  {if not $access
      or ($access == 'user' and $ij.isUser)
      or ($access == 'dm' and $ij.isDM)
      or ($access == 'owner' and ($ij.isDM or $ij.isOwner or $ij.isAdmin))
      or ($access == 'admin' and $ij.isAdmin)}
    <div class="value {$entry.type.css}">
      <div class="value-label-container">
        <div class="value-label">
          {$name}
        </div>
      </div>
      <div class="value-content
          {if $noedit and not $ij.isDM and not $ij.isOwner} value-noedit{/if}
          {if not $value.isEditable and $name != 'name'} value-noedit{/if}">
        {if $value}
          {if $withoutbase}
            {call dma.value.value}
              {param canEdit: not $noedit and ($ij.isDM or $ij.isOwner) /}
              {param entry: $entry /}
              {param value: $value /}
              {param note: $note /}
            {/call}
          {else}
            {call dma.value.withbase}
              {param entry: $entry /}
              {param value: $value /}
              {param canEdit: not $noedit and ($ij.isDM or $ij.isOwner) /}
              {param note: $note /}
            {/call}
          {/if}
        {else}
          {if $content}
            {$content}
          {/if}
        {/if}
      </div>
    </div>
  {/if}
{/deltemplate}

/**
 * Printing of extension values.
 *
 * @param name The extension name
 * @param content The content of the extension values
 */
{template .extension}
  <div class="section">
    <div class="section-title">
      <span class="section-titletext">{$name}</span>
    </div>
    <div class="section-text">
      {$content}
    </div>
  </div>
{/template}

/**
 * Formatting a list of entries.
 *
 * @param title The list title.
 * @param start The start index
 * @param pagesize The size of the page
 * @param entries The entries printed
 * @param label The navigation label for this page
 * @param path The path to this page
 *
 */
{template .list}
  <h1>{$title}</h1>
  {call dma.page.title}
    {param title: $title /}
  {/call}
  {call dma.navigation.navigation}
    {param entries: [[ 'label': $label, 'url': $path ]] /}
  {/call}
  {call .listnav}
    {param start: $start /}
    {param pagesize: $pagesize /}
    {param size: length($entries) /}
  {/call}
  {if $entries}
    <table class="entrylist">
      <tr class="title">
        {delcall dma.entry.listtitles /}
      </tr>
      {foreach $entry in $entries}
        <tr onclick="util.link(event, '{$entry.path}')">
          {delcall dma.entry.listentry}
            {param entry: $entry /}
          {/delcall}
        </tr>
      {/foreach}
    </table>
    {call .listnav}
      {param start: $start /}
      {param pagesize: $pagesize /}
      {param size: length($entries) /}
    {/call}
  {else}
    <div class="error">No entries found!</div>
  {/if}
{/template}

/**
 * Template for a single list entry.
 *
 * @param entry The entry to render.
 */
{deltemplate dma.entry.listentry}
  {call dma.entry.listentryvalue}
    {param style: 'name' /}
    {param entry: $entry /}
    {param content: $entry.name /}
  {/call}
  {call dma.entry.listentryvalue}
    {param style: 'worlds' /}
    {param entry: $entry /}
  {/call}
  {call dma.entry.listentryvalue}
    {param style: 'short' /}
    {param entry: $entry /}
    {param value: $entry.short_description /}
  {/call}
{/deltemplate}

/**
 * Template for a list entry value.
 *
 * @param style The style to set the value
 * @param? value The value to set to
 * @param entry The entry rendered
 * @param? content The content to set, if no value given
 */
{template .listentryvalue}
  <td class="list-{$style}">
    {if $content}
      {$content}
    {else}
      {call dma.value.withbase}
        {param entry: $entry /}
        {param value: $value /}
      {/call}
    {/if}
  </td>
{/template}

/**
 * Template for the list titles.
 */
{deltemplate dma.entry.listtitles}
  {call dma.entry.listtitle}{param title: 'Name' /}{/call}
  {call dma.entry.listtitle}{param title: 'Worlds' /}{/call}
  {call dma.entry.listtitle}{param title: 'Short description' /}{/call}
{/deltemplate}

/** Template for a single list title.
 *
 * @param title the title text
 */
{template .listtitle}
  <td class="title">
    {$title}
  </td>
{/template}

/**
 * Template for list navigation.
 *
 * @param start The start index of the entries
 * @param pagesize The number of entries per page
 * @param size The number of available entries
 */
{template .listnav}
  <div class="list-navigation">
    {if $start > 0}
      {if $start - $pagesize > 0}
        <a href="?start={$start - $pagesize}" class="paginate-previous"
          onclick="return util.link(event, '?start={$start - $pagesize}');">
          {literal}&laquo;{/literal} previous
        </a>
      {else}
        <a href="" onclick="return util.link(event, '?');"
            class="paginate-previous">
          {literal}&laquo;{/literal} previous
        </a>
      {/if}
    {/if}
    {if $size > $pagesize}
      <a href="?start={$start + $pagesize}" class="paginate-next"
        onclick="return util.link(event, '?start={$start + $pagesize}');">
        {literal}&raquo;{/literal} next
      </a>
    {/if}
  </div>
{/template}

/**
 * Template for rendering an index overview.
 *
 * @param title the page title
 * @param indexes the names of the indexes to render
 * @param name the index name
 * @param keys the keys for nested groups
 * @param type The type of the entries shown
 */
{template .indexoverview}
  <h1>{$title}</h1>
  {call dma.page.title}
    {param title: $title /}
  {/call}
  {call dma.navigation.navigation}
    {param entries: [[ 'label': $type, 'url': '/' + $type ],
                     [ 'label': $name, 'url': '' ]] /}
  {/call}
  {if $keys}
    {foreach $key in $keys}
      {if length($indexes[$key]) == 1}
        {call dma.page.link}
          {param url : $name + '/' + $key /}
          {param text}
            <div class="index-overview">
              {$key}
            </div>
          {/param}
          {param tooltip: $key /}
          {param class: 'index-link' /}
        {/call}
      {else}
        <div class="index-overview" onclick="$(this).next().toggle();">
          {$key}
        </div>
        <div class="index-group">
          {foreach $index in $indexes[$key]}
            {call dma.page.link}
              {param url : $name + '/'
                  + ($index ? $key + '::' + $index : $key) /}
              {param text}
                <div class="index-overview">
                  {$index}
                </div>
              {/param}
              {param tooltip: $index /}
              {param class: 'index-link' /}
            {/call}
          {/foreach}
        </div>
      {/if}
    {/foreach}
  {else}
    {foreach $index in $indexes}
      {call dma.page.link}
        {param url : $name + '/' + $index /}
        {param text}
          <div class="index-overview">
            {$index}
          </div>
        {/param}
        {param tooltip: $index /}
        {param class: 'index-link' /}
      {/call}
    {ifempty}
      <div class="error">No indexes found!</div>
    {/foreach}
  {/if}
  <div style="clear: both"></div>
{/template}

/**
 * Template for rendering an index.
 *
 * @param title the page title
 * @param start the start index
 * @param pagesize the size of a page
 * @param entries the entries rendered
 */
{template .index}
  <h1>{$title}</h1>
  {call dma.page.title}
    {param title: $title /}
  {/call}
  {call .listnav}
    {param start: $start /}
    {param pagesize: $pagesize /}
    {param size: length($entries) /}
  {/call}
  {if $entries}
    <table class="entrylist">
      <tr class="title">
        {delcall dma.entry.listtitles /}
      </tr>
      {foreach $entry in $entries}
        <tr onclick="util.link(event, '{$entry.path}')">
          {delcall dma.entry.listentry}
            {param entry: $entry /}
          {/delcall}
        </tr>
      {/foreach}
    </table>
    {call .listnav}
      {param start: $start /}
      {param pagesize: $pagesize /}
      {param size: length($entries) /}
    {/call}
  {else}
    <div class="error">No entries found!</div>
  {/if}
{/template}

/**
 * Template for rendering an item reference.
 *
 * @param item the item rendered
 */
{template .itemreference private="true"}
  {if $item.name}
    {call dma.page.link}
      {param url: $item.path /}
      {param text}
        <div class="item-reference"
            title="{if $ij.isDM}{$item.dmName}{else}{$item.playerName}{/if}">
          <img class="item-image"
              src="{if $item.files.main}{$item.files.main.icon}=s15
              {else}/icons/{$item.type.multilink}-dummy.png{/if}">
          {if $ij.isDM}
            {$item.dmName}
          {else}
            {$item.playerName}
          {/if}
        </div>
      {/param}
    {/call}
  {else}
    <div class="item-reference" title="{$item}">
      {$item}
    </div>
  {/if}
{/template}

/**
 * Template for rendering simple item references.
 *
 * @param item the item rendered
 */
{template .simpleitemreference private="true"}
  {if $item.name}
    {if $ij.isDM}
      {$item.dmName}
    {else}
      {$item.playerName}
    {/if}
  {else}
    {$item}
  {/if}
{/template}

/**
 * Template for rendering an item summary.
 *
 * @param item the item rendered
 */
{template .itemsummary private="true"}
  <div class="item-summary">
    <div class="item-summary-title">
      {if def($item) and $item.name}
        {if $ij.isDM}
          {$item.dmName}
        {else}
          {$item.playerName}
        {/if}
        {sp}({$item.name})
      {else}
        {$item}
      {/if}
    </div>
    <div class="item-summary-text">
      {if def($item) and $item.name}
        <div class="item-summary-desc">
          {$item.appearance |print}
        </div>
        {if $ij.isDM and def($item.short_description.combine.total)}
          <div class="item-overview-value-dm">
            {$item.short_description.combine.total |print}
          </div>
        {/if}
        {if def($item.player_notes)}
          <div class="item-summary-notes">
            {$item.player_notes |print}
          </div>
        {/if}
        {call .overviewValue}
          {param prefix: '' /}
          {param postfix: ';' /}
          {param value: $item.value.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: '' /}
          {param postfix: ';' /}
          {param value: $item.weight.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: 'size' /}
          {param postfix: ';' /}
          {param value: $item.size.combine.max /}
        {/call}
        {call .overviewValue}
          {param prefix: 'hp' /}
          {param postfix: ',' /}
          {param value: $item.hp.combine.total /}
          {param dm: true /}
        {/call}
        {call .overviewValue}
          {param prefix: 'break DC' /}
          {param postfix: ';' /}
          {param value: $item.break_DC.combine.total /}
          {param dm: true /}
        {/call}
        {if $item.extension_counted}
          {call .overviewValue}
            {param prefix: '&#x2736;' /}
            {param postfix: ';' /}
            {param content: $item.count.print + ' '
                + $item.unit.combine.total.print /}
          {/call}
        {elseif $item.extension_multiuse or $item.extension_multiple}
          {call .overviewValue}
            {param prefix: '&#x2736;' /}
            {param postfix: ';' /}
            {param value: $item.count /}
          {/call}
        {/if}
        {if $item.extension_wearable}
          {call .overviewValue}
            {param prefix: '&#x269c;' /}
            {param value: $item.slot.combine.total /}
          {/call}
          {if def($item.don.combine.total)}
            {call .overviewValue}
              {param prefix: ' ' /}
              {param value: $item.don.combine.total /}
            {/call}
            {call .overviewValue}
              {param prefix: ', ' /}
              {param postfix: ';' /}
              {param value: $item.remove.combine.total /}
            {/call}
          {/if}
        {/if}
        {if $item.extension_timed}
          {call .overviewValue}
            {param prefix: '&#x27f3;' /}
            {param postfix: ';' /}
            {param value: $item.duration.combine.total /}
          {/call}
        {/if}
        {if $item.extension_light}
          {call .overviewValue}
            {param prefix: '&#x263c;' /}
            {param value: $item.bright_light.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ' /' /}
            {param postfix: ';' /}
            {param value: $item.shadowy_light.combine.total /}
          {/call}
        {/if}
        {if $item.extension_weapon}
          {call .overviewValue}
            {param prefix: '&#x2694;' /}
            {param value: $item.weapon_type.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ' ' /}
            {param value: $item.proficiency.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ' ' /}
            {param value: $item.weapon_style.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ', ' /}
            {param value: $item.damage.combine.total /}
          {/call}
          {if def($item.secondary.combine.total)}
          {call .overviewValue}
            {param prefix: ' ' /}
            {param value: $item.secondary_damage.combine.total /}
          {/call}
          {/if}
          {call .overviewValue}
            {param prefix: ', range' /}
            {param value: $item.range_increment.combine.total /}
          {/call}
          {if def($item.reach.combine.total)}
            {call .overviewValue}
              {param prefix: ', reach' /}
              {param value: $item.reach.combine.total /}
            {/call}
          {/if}
          ;{sp}
        {/if}
        {if $item.extension_armor}
          {call .overviewValue}
            {param prefix: '&#x2602;' /}
            {param value: $item.armor_type.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ', AC' /}
            {param value: $item.AC_bonus.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ', max dex' /}
            {param value: $item.max_dexterity.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ', check penalty' /}
            {param value: $item.check_penalty.combine.total /}
          {/call}
          {call .overviewValue}
            {param prefix: ', arcane failure' /}
            {param value: $item.arcane_failure.combine.total /}
          {/call}
          ;{sp}
        {/if}
        {if $item.extension_incomplete and $ij.isDM}
          <div class="item-overview-value-dm">
            <literal>&#x2639;</literal>{sp}
            {$item.incomplete.combine.total |print}
          </div>
        {/if}
        {if $item.dm_notes.isDefined and $ij.isDM}
          <div class="item-overview-value-dm">
            {$item.dm_notes |print}
          </div>
        {/if}
      {else}
        Item not found!
      {/if}
    </div>
  </div>
{/template}


/**
 * Print an item in the overview list.
 *
 * @param item the item to print
 */
{template .itemoverview private="true"}
  <div class="item-overview-entry">
    {if not def($item.type)}
      {$item}
    {else}
      <div class="item-overview-weight">
        {if def($item.weight.combine.total)}
          {$item.weight.combine.total.print}
        {else}
          -
        {/if}
      </div>
      {if $ij.isDM}
        {if def($item.value.combine.total)}
          <div class="item-overview-value">
            {$item.value.combine.total.print}
          </div>
        {/if}
      {/if}
      <div>
        <img class="item-image"
            src="{if $item.files.main}{$item.files.main.icon}=s15
            {else}/icons/{$item.type.multilink}-dummy.png{/if}">
        {if $ij.isDM}
          {$item.dmName}
        {else}
          {$item.playerName}
        {/if}
        {sp}({$item.name})
      </div>
      <div class="item-overview-desc">
        {$item.appearance |print}
      </div>
      {if def($item.playernotes)}
        <div class="item-overview-notes">
          {$item.playernotes |print}
        </div>
      {/if}
    </div>
    <div class="item-overview-values">
      {call .overviewValue}
        {param prefix: 'size' /}
        {param postfix: ';' /}
        {param value: $item.size.combine.max /}
      {/call}
      {call .overviewValue}
        {param prefix: 'hp' /}
        {param postfix: ',' /}
        {param value: $item.hp.combine.total /}
        {param dm: true /}
      {/call}
      {call .overviewValue}
        {param prefix: 'break DC' /}
        {param postfix: ';' /}
        {param value: $item.break_DC.combine.total /}
        {param dm: true /}
      {/call}
      {if $item.extension_counted}
        {call .overviewValue}
          {param prefix: '&#x2736;' /}
          {param postfix: ';' /}
          {param content: $item.count.print + ' '
              + $item.unit.combine.total.print /}
        {/call}
      {elseif $item.extension_multiuse or $item.extension_multiple}
        {call .overviewValue}
          {param prefix: '&#x2736;' /}
          {param postfix: ';' /}
          {param value: $item.count /}
        {/call}
      {/if}
      {if $item.extension_wearable}
        {call .overviewValue}
          {param prefix: '&#x269c;' /}
          {param value: $item.slot.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ' ' /}
          {param value: $item.don.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ', ' /}
          {param postfix: ';' /}
          {param value: $item.remove.combine.total /}
        {/call}
      {/if}
      {if $item.extension_timed}
        {call .overviewValue}
          {param prefix: '&#x27f3;' /}
          {param postfix: ';' /}
          {param value: $item.duration.combine.total /}
        {/call}
      {/if}
      {if $item.extension_light}
        {call .overviewValue}
          {param prefix: '&#x263c;' /}
          {param value: $item.bright_light.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ' /' /}
          {param postfix: ';' /}
          {param value: $item.shadowy_light.combine.total /}
        {/call}
      {/if}
      {if $item.extension_weapon}
        {call .overviewValue}
          {param prefix: '&#x2694;' /}
          {param value: $item.weapon_type.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ' ' /}
          {param value: $item.proficiency.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ' ' /}
          {param value: $item.weapon_style.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ', ' /}
          {param value: $item.damage.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ' ' /}
        {/call}
        {if $item.range.combine.total}
          {call .overviewValue}
            {param prefix: ', range' /}
            {param value: $item.range.combine.total /}
          {/call}
        {/if}
        {if $item.reach.combine.total}
          {call .overviewValue}
            {param prefix: ', reach' /}
            {param value: $item.reach.combine.total /}
          {/call}
        {/if}
        ;{sp}
      {/if}
      {if $item.extension_armor}
        {call .overviewValue}
          {param prefix: '&#x2602;' /}
          {param value: $item.armor_type.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ', AC' /}
          {param value: $item.AC_bonus.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ', max dex' /}
          {param value: $item.max_dexterity.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ', check penalty' /}
          {param value: $item.check_penalty.combine.total /}
        {/call}
        {call .overviewValue}
          {param prefix: ', arcane failure' /}
          {param value: $item.arcane_failure.combine.total /}
        {/call}
        ;{sp}
      {/if}
      {if $item.extension_incomplete and $ij.isDM}
        <div class="item-overview-value-dm">
          <literal>&#x2639;</literal>{sp}
          {$item.incomplete.combine.total |print}
        </div>
      {/if}
      {if $item.dm_notes.isDefined and $ij.isDM}
        <div class="item-overview-value-dm">
          {$item.dm_notes |print}
        </div>
      {/if}
      {if $ij.isDM and def($item.short_description.combine.total)}
        <div class="item-overview-value-dm">
          {$item.short_description.combine.total |print}
        </div>
      {/if}
    </div>
  {/if}
  {if $item.extension_contents}
    <div class="item-overview-contents">
      {foreach $content in $item.contents.list}
      {call .itemoverview}
        {param item: entry($item.campaign.key + '/item/'
            + $content.print) /}
        {/call}
      {/foreach}
    </div>
  {/if}
{/template}

/**
 * Print the value with the given pre and post fix.
 * 
 * @param? entry       the entry containing the value
 * @param? prefix      the prefix for the value
 * @param? postfix     the postfix for the value
 * @param? value       the vaue to print
 * @param? content     formatted content instead of a value
 * @param? combination a combination value to print (instead of value or
                       content)
 * @param? dm          if printing only for dm
 */
{template .overviewValue}
  {if $dm}
    {if $ij.isDM}
      <span class="item-overview-value-dm">
        {call .overviewValueRaw data="all" /}
      </span>
    {/if}
  {else}
    {call .overviewValueRaw data="all" /}
  {/if}
{/template}

/**
 * Print the raw value, ignoring dm handling.
 *
 * @param? entry        the entry to render
 * @param? prefix      the prefix for the value
 * @param? postfix     the postfix for the value
 * @param? value       the vaue to print
 * @param? content     formatted content instead of a value
 * @param? combination a combination value to print (instead of value or content)
 */
{template .overviewValueRaw private="true"}
  {if $combination}
    {call dma.value.combined}
      {param value: $combination /}
      {param entry: $entry /}
      {param canEdit: false /}
      {param prefix: $prefix /}
      {param postfix: $postfix /}
    {/call}
  {elseif $content}
    {if $prefix}{$prefix}{sp}{/if}
      {$content}
    {if $postfix}{$postfix}{sp}{/if}
  {else}
    {if def($value)}
      {if $value.isDefined and not def($value.isCombined)}
        {if $prefix}{$prefix}{sp}{/if}
        {$value |print}
        {if $postfix}{$postfix}{sp}{/if}
      {else}
        {call dma.value.withbase}
          {param entry: $entry /}
          {param value: $value /}
          {param canEdit: false /}
          {param prefix: $prefix /}
          {param postfix: $postfix /}
        {/call}
      {/if}
    {else}
      (no value) [{$value}]
    {/if}
  {/if}
{/template}