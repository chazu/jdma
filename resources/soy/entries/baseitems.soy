/* ****************************************************************************
 * Copyright (C) 2002-2014 Peter 'Merlin' Balsiger And Fred 'Mythos' Dobler
 * All Rights Reserved
 *
 * This File Is Part Of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant Is Free Software; You Can Redistribute It And/Or
 * Modify It Under The Terms Of The Gnu General Public License As Published By
 * The Free Software Foundation; Either Version 2 Of The License, Or
 * (At Your Option) Any Later Version.
 *
 * Dungeon Master Assistant Is Distributed In The Hope That It Will Be Useful,
 * But Without Any Warranty; Without Even The Implied Warranty Of
 * Merchantability Or Fitness For A Particular Purpose.  See The
 * Gnu General Public License For More Details.
 *
 * You Should Have Received A Copy Of The Gnu General Public License
 * Along With Dungeon Master Assistant; If Not, Write To The Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, Ma  02111-1307  Usa
 *****************************************************************************/

 /*
 * Templates for base products.
 */
{namespace dma.entries.baseitems autoescape="deprecated-contextual"}

/**
 * Show the given entry in standard format.
 * 
 * @param entry The entry to show.
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 */
{template .show}
  {call dma.entry.show}
    {param entry: $entry /}
    {param type: 'base-item' /}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
    {param color: '#008' /}
    {param title}
      {call dma.entry._new_title}
        {param title: $entry.name /}
        {param color: '#008' /}
      {/call}
    {/param}
    {param values}            
      {if length($entry.baseNames)}
        {call dma.entry.value}
          {param label: 'Base' /}
          {param value}
            {foreach $base in $entry.baseNames}
              {call dma.page.link}
                {param text: $base /}
                {param url: '/item/'  + $base /}
              {/call}
              {if not isLast($base)}; {/if}
            {/foreach}
          {/param}
          {param color: '#008' /}
        {/call} 
      {/if}      
      {if $entry.player_name.present}
        {call dma.entry.value}
          {param label: 'Player Name' /}
          {param value}
            {annotate($entry.combined_player_name)}
          {/param}
          {param color: '#008' /}
        {/call}
      {/if}
      {if length($entry.synonyms)}
        {call dma.entry.value}
          {param label: 'Synonyms' /}
          {param value}
            {foreach $synonym in $entry.synonyms}
              {$synonym}
              {if not isLast($synonym)}; {/if}
            {/foreach}
          {/param}
          {param color: '#008' /}
        {/call}
      {/if}      
      {if $entry.categories.present or $entry.combined_categories.get.present}
        {call dma.entry.value}
          {param label: 'Categories' /}
          {param value}
            {if length($entry.categories)}
              {foreach $category in $entry.categories}
                {$category}
                {if not isLast($category)}, {/if}
              {/foreach}
            {/if}
            {annotate($entry.combined_categories)}
          {/param}
          {param color: '#008' /}
        {/call}
      {/if}
      {call dma.entry.value}
        {param label: 'Worlds' /}        
        {param value}
          {annotate($entry.combined_worlds)}
        {/param}
        {param color: '#008' /}
      {/call}
      {if $entry.incomplete.present or $entry.combined_incomplete.get.present}
        {call dma.entry.value}
          {param label: 'Incomplete' /}
          {param value}
            {if $entry.incomplete}
              {$entry.incomplete}{sp}
            {/if}
              {annotate($entry.combined_incomplete)}
          {/param}
          {param color: '#008' /}
        {/call}
      {/if}
      {call dma.entry.value}
        {param label: 'Value' /}
        {param value: annotate($entry.combined_value) /}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'Weight' /}
        {param value: annotate($entry.combined_weight) /}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'HP' /}
        {param value: annotate($entry.combined_HP) /}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'Size' /}
        {param value}
          {annotate($entry.combined_size)}{sp}
          {annotate($entry.combined_size_modifier)}
        {/param}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'Substance' /}
        {param value}
          {annotate($entry.combined_substance)}
          {sp}{annotate($entry.combined_thickness)}
          , hardness {annotate($entry.combined_hardness)}
          , break dc {annotate($entry.break_DC)}
        {/param}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'Probability' /}
        {param value: annotate($entry.combined_probability) /}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'Appearances' /}        
        {param value: annotate($entry.combined_appearances) /}
        {param color: '#008' /}
      {/call}
      {if $entry.isWearable}
        {call dma.entry.value}
          {param label: 'Wear' /}        
          {param value}
            {annotate($entry.combined_slot)}
            , don {annotate($entry.combined_don)}
            {sp}(hastily {annotate($entry.combined_hastily)}
            , remove {annotate($entry.combined_remove)}
          {/param}
          {param color: '#008' /}          
        {/call}
      {/if}
      {if $entry.isArmor}
        {call dma.entry.value}
          {param label: 'Armor' /}
          {param value}
            {annotate($entry.combined_armor_type)},
            max dexterity {annotate($entry.combined_max_dex)},{sp}
            {annotate($entry.combined_check_penalty)} check penalty,{sp}
            {annotate($entry.arcane_failure)}% arcane failure
          {/param}
          {param color: '#008' /}
        {/call}
        {call dma.entry.value}
          {param label: 'AC Bonus' /}        
          {param value}
            {annotate($entry.combined_armor_bonus)}
          {/param}
          {param color: '#008' /}          
        {/call}
      {/if}
      {if $entry.isWeapon}
        {call dma.entry.value}
          {param label: 'Weapon' /}
          {param value}
            {annotate($entry.combined_weapon_type)}
            {sp}
            {annotate($entry.combined_weapon_style)}
            {sp}
            {annotate($entry.combined_proficiency)}
            , range {annotate($entry.combined_range)}
            , reach {annotate($entry.combined_reach)}
            , max attacks {annotate($entry.combined_max_attacks)}
            {if $entry.ammunition}
              , ammunition
            {/if}
          {/param}
          {param color: '#008' /}
        {/call}
        {call dma.entry.value}
          {param label: 'Damage' /}
          {param value}
            {annotate($entry.combined_damage)}
            {if $entry.combined_secondary_damage.get.present}
              /{annotate($entry.combined_secondary_damage)}
            {/if}
            {if $entry.combined_splash.combined_splash.get.present}
              &nbsp;splash&nbsp;{annotate($entry.combined_splash)}
            {/if}
            &nbsp;({annotate($entry.combined_critical)})
          {/param}
          {param color: '#008' /}
        {/call}
      {/if}
      {if $entry.isCommodity}
        {call dma.entry.value}
          {param label: 'Commodity' /}        
          {param color: '#008' /}
          {param value}
            {annotate($entry.combined_area)}
            {annotate($entry.combined_length)}
          {/param}
        {/call}
      {/if}
      {if $entry.isContainer}
        {call dma.entry.value}
          {param label: 'Container' /}        
          {param color: '#008' /}
          {param value}
            {annotate($entry.combined_state)}{sp}
            {annotate($entry.combined_capacity)}
          {/param}
        {/call}
      {/if}
      {if $entry.counted}
        {if $entry.multiple.present}
          {call dma.entry.value}
            {param label: 'Multiple' /}        
            {param color: '#008' /}
            {param value}
              {annotate($entry.combined_multiple)}{sp}
              {annotate($entry.combined_count_unit)}
            {/param}
          {/call}
        {else}
          {call dma.entry.value}
            {param label: 'Multiuse' /}        
            {param color: '#008' /}
            {param value: annotate($entry.combined_multiuse) /}
          {/call}
        {/if}
      {/if}
      {if $entry.is_light}
        {call dma.entry.value}
          {param label: 'Light' /}        
          {param color: '#008' /}
          {param value}
            {annotate($entry.light_shape)}{sp}
            bright {annotate($entry.combined_bright_light)} bright{sp}
            shadowy {annotate($entry.combined_shadowy_light)}
          {/param}
        {/call}
      {/if}
      {if $entry.isTimed}
        {call dma.entry.value}
          {param label: 'Timed' /}        
          {param color: '#008' /}
          {param value: annotate($entry.combined_time) /}
        {/call}
      {/if}
      {if $entry.isMagical}
        {call dma.entry.value}
          {param label: 'Magic' /}        
          {param color: '#008' /}
          {param value}
            {annotate($entry.combined_magical_modifiers)}
          {/param}
        {/call}
      {/if}
      {call dma.entry.value}
        {param label: 'References' /}
        {param value}
          {annotate($entry.combined_references)}
        {/param}
        {param color: '#008' /}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * Formatting a list of entries.
 *
 * @param title The list title.
 * @param start The start index
 * @param pagesize The size of the page
 * @param entries The entries printed
 * @param label The navigation label for this page
 * @param path The path to this page
 *
 */
{template .list}
  {call dma.entry.newlist}
    {param title: $title /}
    {param label: $label /}
    {param path: $path /}
    {param start: $start /}
    {param pagesize: $pagesize /}
    {param size: $entries ? length($entries) : 0 /}
    {param titles: [ 'Name', 'Worlds', 'Short Descriptoion'] /}
    {param entries}
      {foreach $entry in $entries}
        <tr onclick="util.link(event, '{$entry.path}')">
          {call dma.entry.newListEntry}
            {param path: $entry.path /}
            {param values: [
              $entry.name, $entry.worldsString, $entry.short_description
            ] /}
          {/call}
        </tr>
      {/foreach}
    {/param}
  {/call}
{/template}

/**
 * Editiing the base item.
 * 
 * @param entry   The item to edit. 
 * @param id      The id to use for the editing dialog.
 * @param create  Whether to create a new entry
 */
{template .edit}
  {call dma.edit.entry}
    {param entry: $entry /}
    {param type: 'item' /}
    {param id: $id /}
    {param create: $create /}
    {param values}
      {call dma.edit.value}
        {param name: 'name' /}
        {param label: 'Name' /}
        {param value: $entry.name /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value_text}
        {param name: 'description' /}
        {param label: 'Description' /}
        {param value: $entry.description /}
        {param validate: 'any' /}
        {param color: '#444' /}
      {/call}
      {call dma.edit.value}
        {param name: 'short-description' /}
        {param label: 'Short Description' /}
        {param value: $entry.short_description /}
        {param validate: 'any' /}
        {param color: '#444' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'base' /}
        {param label: 'Base' /}
        {param values: $entry.base_names /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
        {param autocomplete: 'base item/name' /}
      {/call}
      {call dma.edit.value}
        {param name: 'player_name' /}
        {param label: 'Player Name' /}
        {param value: $entry.player_name.present ? 
          $entry.player_name : '' /}
        {param validate: 'any' /}
        {param color: '#008' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'synonyms' /}
        {param label: 'Synonyms' /}
        {param values: $entry.synonyms /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value_list}
        {param name: 'categories' /}
        {param label: 'Categories' /}
        {param values: $entry.categories /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}
      {call dma.edit.value_list}
        {param name: 'worlds' /}
        {param label: 'Worlds' /}
        {param values: $entry.worlds /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'incomplete' /}
        {param label: 'Incomplete' /}
        {param value: $entry.incomplete /}
        {param validate: 'any' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'value' /}
        {param label: 'Value' /}
        {param value: $entry.value.present ? $entry.value : '' /}
        {param validate: 'money' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'weight' /}
        {param label: 'Weight' /}
        {param value: $entry.weight.present ? $entry.weight : '' /}
        {param validate: 'weight' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.generic_value}
        {param label: 'Size' /}
        {param color: '#008' /}
        {param value}
          {call dma.edit.field_selection}
            {param name: 'size' /}
            {param value: $entry.size.string /}
            {param choices: $entry.size.names /}
            {param class: 'narrow' /}            
          {/call}
          {call dma.edit.field_selection}
            {param name: 'size_modifier' /}
            {param value: $entry.size_modifier.string /}
            {param choices: $entry.size_modifier.names /}
            {param class: 'narrow' /}            
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param label: 'Substance' /}
        {param color: '#008' /}
        {param value}
          {call dma.edit.field_selection}
            {param name: 'substance' /}
            {param value: $entry.substance.string /}
            {param choices: $entry.substance.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'thickness' /}
            {param value: 
              $entry.thickness.present ? $entry.thickness : '' /}
            {param validate: 'distance' /}
            {param caption: 'thickness' /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'hardness' /}
            {param value: $entry.hardness /}
            {param validate: 'number' /}
            {param caption: 'hardness' /}
            {param class: 'narrow' /}
          {/call}    
          {call dma.edit.field_input}
            {param name: 'break' /}
            {param value: $entry.break_DC.present ? $entry.break_DC.get : '' /}
            {param validate: 'number' /}
            {param caption: 'break dc' /}
            {param class: 'narrow' /}
          {/call}    
        {/param}
      {/call}
      {call dma.edit.value_selection}
        {param name: 'probability' /}
        {param label: 'Probability' /}
        {param value: $entry.probability.string /}
        {param choices: $entry.probability.names /}
        {param color: '#008' /}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'appearances' /}
        {param color: '#008' /}
        {param label: 'Appearances' /}
        {param value}
          {call dma.edit.field}
            {param markup}
              {foreach $appearance in $entry.appearances}
                {call dma.edit.field_list_multiple}
                  {param class: 'narrow' /}
                  {param values: [
                    [
                      'name': 'appearances.probability',
                      'value': $appearance.probability.string,
                      'validate': 'non-empty',
                      'type': 'selection',
                      'choices': $entry.probabilityNames
                    ],
                    [
                      'name': 'appearances.text',
                      'value': $appearance.text,
                      'validate': 'non-empty'
                    ]
                  ] 
                  /}
                {/call}          
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param class: 'narrow' /}
                  {param values: [
                    [
                      'name': 'appearances.probability',
                      'value': 'Unknown',
                      'validate': 'non-empty',
                      'type': 'selection',
                      'choices': $entry.probabilityNames
                    ],
                    [
                      'name': 'appearances.text',
                      'value': '',
                      'validate': 'non-empty'
                    ]
                  ] 
                  /}
                {/call}          
              {/foreach}
            {/param}
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Wear' /}
        {param value}
          {call dma.edit.field_selection}
            {param name: 'wearable.slot' /}
            {param value: $entry.slot.string /}
            {param choices: $entry.slot.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'wearable.don' /}
            {param value: $entry.don.isPresent 
              ? $entry.don.get : '' /}
            {param validate: 'duration' /}
            {param class: 'narrow' /}
            {param caption: 'don' /}            
          {/call}
          {call dma.edit.field_input}
            {param name: 'wearable.don_hastily' /}
            {param value: $entry.don_hastily.isPresent 
              ? $entry.don_hastily.get : '' /}
            {param validate: 'duration' /}
            {param class: 'narrow' /}
            {param caption: 'don hastily' /}            
          {/call}
          {call dma.edit.field_input}
            {param name: 'wearable.remove' /}
            {param value: $entry.remove.isPresent 
              ? $entry.remove.get : '' /}
            {param validate: 'duration' /}
            {param class: 'narrow' /}
            {param caption: 'remove' /}            
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Armor' /}
        {param value}
          {call dma.edit.field_selection}
            {param name: 'armor.type' /}
            {param value: $entry.armor_type.string /}
            {param choices: $entry.armor_type.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'armor.bonus' /}
            {param value: $entry.armor_bonus.isPresent 
              ? $entry.armor_bonus.get : '' /}
            {param validate: 'modifier' /}
            {param class: 'narrow' /}
            {param caption: 'bonus' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'armor.max_dex' /}
            {param value: $entry.max_dex.present 
              ? $entry.armor.max_dex.get : '' /}
            {param validate: 'number' /}
            {param class: 'narrow' /}
            {param caption: 'max dexterity' /}
          {/call}            
          {call dma.edit.field_input}
            {param name: 'armor.check_penalty' /}
            {param value: $entry.check_penalty.present 
              ? $entry.armor.check_penalty.get : '' /}
            {param validate: 'number' /}
            {param class: 'narrow' /}
            {param caption: 'check penalty' /}
          {/call}            
          {call dma.edit.field_input}
            {param name: 'armor.arcane_failure' /}
            {param value: $entry.arcane_failure.present
              ? $entry.arcane_failure.get : '' /}
            {param validate: 'number' /}
            {param class: 'narrow' /}
            {param caption: 'arcane failure' /}
          {/call}            
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Damage' /}
        {param value}
          {call dma.edit.field_input}
            {param name: 'weapon.damage.first' /}
            {param value: $entry.damage.isPresent 
              ? $entry.damage : '' /}
            {param validate: 'damage' /}
            {param class: 'narrow' /}            
          {/call}
          {sp}/{sp}
          {call dma.edit.field_input}
            {param name: 'weapon.damage.second' /}
            {param value: $entry.secondary_damage.isPresent 
              ? $entry.secondary_damage : '' /}
            {param validate: 'damage' /}
            {param class: 'narrow' /}            
          {/call}
          {sp}
          {call dma.edit.field_input}
            {param name: 'weapon.damage.splash' /}
            {param value: $entry.splash.isPresent
              ? $entry.splash : '' /}
            {param validate: 'damage' /}
            {param class: 'narrow' /}
            {param caption: 'splash' /}            
          {/call}
          {sp}
          {call dma.edit.field_input}
            {param name: 'weapon.damage.critical' /}
            {param value: $entry.critical.isPresent
              ? $entry.critical : '' /}
            {param validate: 'any' /}
            {param class: 'narrow' /}
            {param caption: 'critical' /}            
          {/call}          
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Weappon' /}
        {param value}
          {call dma.edit.field_selection}
            {param name: 'weapon.type' /}
            {param value: $entry.weapon_type.string /}
            {param choices: $entry.weapon_type.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_selection}
            {param name: 'weapon.style' /}
            {param value: $entry.weapon_style.string /}
            {param choices: $entry.weapon_style.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_selection}
            {param name: 'weapon.proficiency' /}
            {param value: $entry.proficiency.string /}
            {param choices: $entry.proficiency.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'weapon.range' /}
            {param caption: 'range' /}
            {param value: $entry.range.present 
              ? $entry.range : '' /}
            {param validate: 'distance' /}
            {param class: 'narrow' /}
          {/call}    
          {call dma.edit.field_input}
            {param name: 'weapon.reach' /}
            {param caption: 'reach' /}
            {param value: $entry.reach.present 
              ? $entry.reach : '' /}
            {param validate: 'distance' /}
            {param class: 'narrow' /}
          {/call}    
          {call dma.edit.field_input}
            {param name: 'weapon.max_attacks' /}
            {param caption: 'max attacks' /}
            {param value: $entry.max_attacks.present 
              ? $entry.max_attacks : '' /}
            {param validate: 'number' /}
            {param class: 'narrow' /}
          {/call}
        {/param}
      {/call}    
      {call dma.edit.value_flag}
        {param name: 'weapon.ammunition' /}
        {param label: 'Ammunition' /}
        {param value: $entry.ammunition /}
        {param color: '#008' /}
        {param autocomplete: 'base item/name' /}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Commodity' /}
        {param value}
          {call dma.edit.field_input}
            {param name: 'commodity.area' /}
            {param value: $entry.area.isPresent
              ? $entry.area.get : '' /}
            {param validate: 'area' /}
            {param caption: 'area' /}            
            {param class: 'narrow' /}            
          {/call}
          {call dma.edit.field_input}
            {param name: 'commodity.length' /}
            {param value: $entry.length.isPresent 
              ? $entry.lemgth.get : '' /}
            {param validate: 'distance' /}
            {param caption: 'length' /}            
            {param class: 'narrow' /}            
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Container' /}
        {param value}
          {call dma.edit.field_selection}
            {param name: 'container.state' /}
            {param value: $entry.state.string /}
            {param choices: $entry.state.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'container.capacity' /}
            {param value: $entry.capacity.isPresent 
              ? $entry.capacity.get : '' /}
            {param validate: 'volume' /}
            {param caption: 'capacity' /}            
            {param class: 'narrow' /}
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Count' /}
        {param value}
          {call dma.edit.field_input}
            {param name: 'multiuse' /}
            {param value: $entry.multiuse.isPresent 
              ? $entry.multiuse.get : '' /}
            {param validate: 'number' /}
            {param caption: 'uses' /}            
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'multiple' /}
            {param value: $entry.multiple.isPresent 
              ? $entry.multiple.get : '' /}
            {param validate: 'number' /}
            {param caption: 'copies' /}            
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_selection}
            {param name: 'count_unit' /}
            {param value: $entry.count_unit.string /}
            {param choices: $entry.count_unit.names /}
            {param class: 'narrow' /}
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Light' /}
        {param value}
          {call dma.edit.field_selection}
            {param name: 'light.shape' /}
            {param value: $entry.light_shape.string /}
            {param choices: $entry.light_shape.names /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'light.bright' /}
            {param value: $entry.bright_light.isPresent 
              ? $entry.bright_light.get : '' /}
            {param validate: 'distance' /}
            {param caption: 'bright' /}            
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'light.shadowy' /}
            {param value: $entry.shadowy_light.isPresent 
              ? $entry.shadowy_light.get : '' /}
            {param validate: 'distance' /}
            {param caption: 'shadowy' /}            
            {param class: 'narrow' /}
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Timed' /}
        {param value}
          {call dma.edit.field_input}
            {param name: 'timed' /}
            {param value: $entry.timed.isPresent 
              ? $entry.timed.get : '' /}
            {param validate: 'duration' /}
            {param caption: 'duration' /}            
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param name: 'magical' /}
        {param color: '#008' /}
        {param label: 'Magic' /}
        {param value}
          {call dma.edit.field}
            {param markup}
              {foreach $modifier in $entry.magical_modifiers}  
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'magical.type',
                      'value': $modifier.type,
                      'type': 'selection',
                      'choices': $entry.modifier_type_names
                    ],
                    [
                      'name': 'magical.modifier',
                      'value': $modifier.modifier,
                      'validate': 'modifier',
                      'caption': 'modifier' 
                    ]
                  ] 
                  /}
                {/call}          
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'magical.type',
                      'value': '',
                      'type': 'selection',
                      'choices': $entry.modifier_type_names
                    ],
                    [
                      'name': 'magical.modifier',
                      'value': '',
                      'validate': 'modifier',
                      'caption': 'modifier' 
                    ]
                  ] 
                  /}
                {/call}          
              {/foreach}
            {/param}
          {/call}
        {/param}      
      {/call}      
      {call dma.edit.generic_value}
        {param name: 'references' /}
        {param color: '#008' /}
        {param label: 'References' /}
        {param value}
          {call dma.edit.field}
            {param markup}
              {foreach $reference in $entry.references}  
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'references.name',
                      'value': $reference.name,
                      'validate': 'non-empty',
                      'caption': 'name' 
                    ],
                    [
                      'name': 'references.pages',
                      'value': $reference.pagesString,
                      'validate': 'any',
                      'caption': 'pages' 
                    ]
                  ] 
                  /}
                {/call}          
              {ifempty}
                {call dma.edit.field_list_multiple}
                  {param values: [
                    [
                      'name': 'references.name',
                      'value': '',
                      'validate': 'non-empty',
                      'caption': 'name' 
                    ],
                    [
                      'name': 'references.pages',
                      'value': '',
                      'validate': 'any',
                      'caption': 'pages' 
                    ]
                  ] 
                  /}
                {/call}          
              {/foreach}
            {/param}
          {/call}
        {/param}            
      {/call}
    {/param}
  {/call}
{/template}

