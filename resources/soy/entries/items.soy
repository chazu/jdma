/* ****************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/*
 * Templates for products
 */
{namespace dma.entries.items autoescape="deprecated-contextual"}

/**
 * Show the given entry in standard format.
 * 
 * @param entry The entry to show.
 * @param first the first entry available, if any
 * @param previous the previous entry, if any
 * @param list the overview of all entries
 * @param next the next entry, if any
 * @param last the last entry, if any
 */
{template .show}
  {call dma.entry.show}
    {param entry: $entry /}
    {param type: 'item' /}
    {param first: $first /}
    {param previous: $previous /}
    {param list: $list /}
    {param next: $next /}
    {param last: $last /}
    {param color: '#008' /}
    {param title}
      {call dma.entry._new_title}
        {param title}
          {call .name}
            {param entry: $entry /}
          {/call}
        {/param}
        {param color: '#008' /}
      {/call}      
    {/param}
    {param values}            
      {if length($entry.baseNames)}
        {call dma.entry.value}
          {param label: 'Base' /}
          {param value}
            {foreach $base in $entry.baseNames}
              {call dma.page.link}
                {param text: $base /}
                {param url: '/item/'  + $base /}
              {/call}
              {if not isLast($base)}; {/if}
            {/foreach}
          {/param}
          {param color: '#008' /}
        {/call} 
      {/if}      
      {if $entry.parent.present}
        {call dma.entry.value}
          {param label: 'Parent' /}
          {param value: $entry.parent /}
          {param color: '#008' /}
        {/call}
      {/if} 
      {call dma.entry.value}
        {param label: 'HP' /}
        {param value}
         {$entry.HP} (max {annotate($entry.combined_max_HP)})
        {/param}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'Value' /}
        {param value: annotate($entry.combined_value) /}
        {param color: '#008' /}
      {/call}
      {call dma.entry.value}
        {param label: 'Appearance' /}
        {param value: $entry.appearance /}
        {param color: '#008' /}
      {/call}
      {if $entry.player_notes.present}
        {call dma.entry.value}
          {param label: 'Player Notes' /}
          {param value: $entry.player_notes /}
          {param color: '#008' /}
        {/call}
      {/if}
      {if $entry.DM_notes.present}
        {call dma.entry.value}
          {param label: 'DM Notes' /}
          {param value: $entry.DM_notes /}
          {param color: '#008' /}
        {/call}
      {/if}
      {if $entry.multiple.present}
        {call dma.entry.value}
          {param label: 'Multiple' /}
          {param value}
            {$entry.multiple} {annotate($entry.combined_count_unit)}
          {/param}
          {param color: '#008' /}
        {/call}
      {/if}
      {if $entry.multiuse.present}
        {call dma.entry.value}
          {param label: 'Multiuse' /}
          {param value: $entry.multiuse /}
          {param color: '#008' /}
        {/call}
      {/if}
      {if $entry.timed}
        {call dma.entry.value}
          {param label: 'Timed' /}
          {param value}
            {$entry.time_left} of {annotate($entry.combined_timed)}
          {/param}
          {param color: '#008' /}
        {/call}
      {/if}
        {if $entry.container}
          {call dma.entry.value}
            {param label: 'Contents' /}
            {param color: '#008' /}
            {param value}
              {foreach $item in $entry.contents}
                {$item.name}
                {if not isLast($item)}, {/if}
              {/foreach}
              {if $ij.user}
              {sp}|{sp}
              <span class="action"
                    onclick="edit.show('', '{$entry.campaign.path}/item/CREATE',
                                       'add-item', '',
                                       'parent:item/{$entry.name}')">
                add item
              </span>
              {/if}
            {/param}
          {/call}
        {/if}
    {/param}
  {/call}
  
  {call .tiny}
    {param entry: $entry /}
  {/call}

  {call .small}
    {param entry: $entry /}
  {/call}

  {call .large}
    {param entry: $entry /}
  {/call}
{/template}

/**
 * Formatting a list of entries.
 *
 * @param title The list title.
 * @param start The start index
 * @param pagesize The size of the page
 * @param entries The entries printed
 * @param label The navigation label for this page
 * @param path The path to this page
 *
 */
{template .list}
  {call dma.entry.newlist}
    {param title: $title /}
    {param label: $label /}
    {param path: $path /}
    {param start: $start /}
    {param pagesize: $pagesize /}
    {param size: $entries ? length($entries) : 0 /}
    {param titles: [ 'Name', 'DM'] /}
    {param entries}
      {foreach $entry in $entries}
        <tr onclick="util.link(event, '{$entry.path}')">
          {call dma.entry.newListEntry}
            {param path: $entry.path /}
            {param values: [
              $entry.name, $entry.DM.get
            ] /}
          {/call}
        </tr>
      {/foreach}
    {/param}
  {/call}
{/template}

/**
 * Editiing the base character.
 * 
 * @param entry   The character to edit. 
 * @param id      The id to use for the editing dialog.
 * @param create  Whether to create a new entry
 */
{template .edit}
  {call dma.edit.entry}
    {param entry: $entry /}
    {param type: 'product' /}
    {param id: $id /}
    {param create: $create /}
    {param values}
      {call dma.edit.value}
        {param name: 'name' /}
        {param label: 'Name' /}
        {param value: $entry.name /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value_list}
        {param name: 'base' /}
        {param label: 'Base' /}
        {param values: $entry.base_names /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
        {param autocomplete: 'base item/name' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'parent' /}
        {param label: 'Parent' /}
        {param value: $entry.parent.present ? $entry.parent : '' /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'hp' /}
        {param label: 'HP' /}
        {param value: $entry.HP > -10 ? $entry.HP : '' /}
        {param validate: 'number' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'value' /}
        {param label: 'Value' /}
        {param value: $entry.value.present? $entry.value.get : '' /}
        {param validate: 'money' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'appearance' /}
        {param label: 'Appearance' /}
        {param value: $entry.appearance.present ? $entry.appearance : '' /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'player_name' /}
        {param label: 'Player Name' /}
        {param value: $entry.player_name.present 
          ? $entry.player_name.get : '' /}
        {param validate: 'any' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'player_notes' /}
        {param label: 'Player Notes' /}
        {param value: $entry.player_notes.present 
          ? $entry.player_notes.get : '' /}
        {param validate: 'any' /}
        {param color: '#008' /}
      {/call}    
      {call dma.edit.value}
        {param name: 'dm_notes' /}
        {param label: 'DM Notes' /}
        {param value: $entry.DM_notes.present 
          ? $entry.DM_notes.get : '' /}
        {param validate: 'non-empty' /}
        {param color: '#008' /}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Count' /}
        {param value}
          {call dma.edit.field_input}
            {param name: 'multiuse' /}
            {param value: $entry.counted ? $entry.multiuse : '' /}
            {param validate: 'number' /}
            {param caption: 'uses' /}
            {param class: 'narrow' /}
          {/call}
          {call dma.edit.field_input}
            {param name: 'multiple' /}
            {param value: $entry.counted ? $entry.multiple : '' /}
            {param validate: 'number' /}
            {param caption: 'copies' /}
            {param class: 'narrow' /}
          {/call}
        {/param}
      {/call}
      {call dma.edit.generic_value}
        {param color: '#008' /}
        {param label: 'Time Left' /}
        {param value}
          {call dma.edit.field_input}
            {param name: 'time_left' /}
            {param value: $entry.time_left.present ? $entry.time_left : '' /}
            {param validate: 'duration' /}
          {/call}
        {/param}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * The tiny item card.
 *
 * @param entry      The entry rendered.
 */
{template .tiny}
  {if $entry.path}
    <div class="entry item card tiny" onclick="details('{$entry.path}')">
      <div class="contents" 
           style="border-color: #ccf; background-color: #eef">
        {call dma.entry.mainImage}
          {param entry: $entry /}
          {param size: 35 /}
        {/call}

        <div class="title">
          {if $ij.isDM}
            {$entry.DM_name}  
            {if $entry.player_name and $entry.DM_name != $entry.player_name}
              {sp}[{$entry.player_name}]
            {/if} 
          {else}
            {$entry.player_name}
          {/if}
          <br />
          {$entry.name}
        </div>
      </div>
    </div>
  {else}
    {$entry}
  {/if}
{/template}

/**
 * The small item card.
 *
 * @param entry The entry rendered.
 */
{template .small}
  <div class="entry item card small">
    <div class="header" style="background-color: #008">
      <div class="actions">
        <div class="sprite white delete" title="permanently delete this"></div>
      </div>

      <div class="title">
        {if $ij.isDM}
          {$entry.DM_name} 
          {if $entry.player_name and $entry.DM_name != $entry.player_name}
            {sp}[{$entry.player_name}]
          {/if} 
        {else}
          {$entry.player_name}
        {/if}
        {sp}({$entry.name})
        {if $ij.isDM and $entry.DM_name != $entry.player_name}
          <br /><span class="subtitle">{$entry.player_name}&nbsp;</span>
        {/if}
      </div>
    </div>

    <div class="contents" style="background-color: #eef; border-color: #ccf">
      <div class="image main">
        {call dma.entry.mainImage}
          {param entry: $entry /}
          {param size: 50 /}
        {/call}
      </div>

      {call .statistics}
        {param entry: $entry /}
      {/call}

      <div class="appearance">
        {$entry.appearance}
      </div>

     <div class="short-description">
       {annotate($entry.combined_short_description)}
     </div>

   </div>
  </div>
{/template}

/**
 * The item card.
 *
 * @param entry The entry rendered.
 */
{template .large}
  <div class="entry item card">
    <div class="header" style="background-color: #008">
      <div class="actions">
        <div class="sprite white delete" title="permanently delete this"></div>
      </div>

      <div class="title">
        {if $ij.isDM}
          {$entry.DM_name} 
          {if $entry.player_name and $entry.DM_name != $entry.player_name}
            {sp}[{$entry.player_name}]
          {/if} 
        {else}
          {$entry.player_name}
        {/if}
        {sp}({$entry.name})
        {if $ij.isDM and $entry.DM_name != $entry.player_name}
          <br /><span class="subtitle">{$entry.player_name}&nbsp;</span>
        {/if}
      </div>
    </div>

    <div class="contents" style="background-color: #eef; border-color: #ccf">
      <div class="top-block">
        <div class="align-center size-tiny">
          {$entry.base}
        </div>

        <div class="image main">
          {call dma.entry.mainImage}
            {param entry: $entry /}
            {param size: 90 /}
          {/call}
        </div>

        {call .statistics}
          {param entry: $entry /}
        {/call}
      </div>

      <div class="bottom-block">
        <div class="appearance">
          {$entry.appearance}
        </div>

        {if $entry.incomplete.present and $ij.isDM}
          <div class="incomplete">
            {call dma.value.extension}
              {param value: 'incomplete' /}
            {/call}
            {sp}{annotate($entry.combined_incomplete)}
          </div>
        {/if}
        
        <div class="description">
          {annotate($entry.combined_description)}
        </div>
        {if $entry.DM_notes.present} 
          <div class="dm-notes block">
            {call dma.value.extension}
              {param value: 'notes' /}
            {/call}
            {sp}
            {$entry.dm_notes.get}
          </div>
        {/if}
        {if $entry.player_notes.present}
          <div class="player-notes block">
            {call dma.value.extension}
              {param value: 'notes' /}
            {/call}
            {sp}
            {$entry.player_notes.get}
          </div>
        {/if}
        {if $entry.container}
          <div class="content">
            {if $entry.campaign.present}
              {foreach $item in $entry.contents}
                {call .tiny}             
                  {param entry: entry($entry.campaign.key + '/item/'
                      + $item.name) /}
                {/call}
              {/foreach}
            {/if}
          </div>
        {/if}
        <div class="references">
          {annotate($entry.combined_references)}
        </div>
      </div>
    </div>
  </div>
{/template}

/**
 * Statistics values in item the card.
 *
 * @param entry The entry shown.
 */
{template .statistics}
  <div class="statistics">
    <div class="statistics-lines">
      <div class="value">
        {call dma.value.extension}
          {param value: 'value' /}
        {/call}
        {sp}
        {annotate($entry.combined_value)}
      </div>

      <div class="hp">
        {call dma.value.extension}
          {param value: 'hp' /}
        {/call}
        {sp}
        {$entry.HP} (of {annotate($entry.combined_max_HP)}
      </div>

      <div class="weight">
        {call dma.value.extension}
          {param value: 'weight' /}
        {/call}
        {sp}
        {annotate($entry.combined_weight)}
      </div>
      <div class="size">
        {call dma.value.extension}
          {param value: 'size' /}
        {/call}
        {sp}
        {annotate($entry.combined_size)}
      </div>

      <div class="hardness">
        {call dma.value.extension}
          {param value: 'hardness' /}
        {/call}
        {annotate($entry.combined_hardness)}
        {sp}
        {call dma.value.extension}
          {param value: 'break' /}
        {/call}
        {annotate($entry.combined_break_DC)}
      </div>

      <div class="substance">
        {call dma.value.extension}
          {param value: 'substance' /}
        {/call}
        {sp}
        <span class="value">
          {annotate($entry.combined_thickness)}
          {sp}
          {annotate($entry.combined_substance)}
        </span>
      </div>

      {if $entry.multiple.present}
        <div class="counted">
          {call dma.value.extension}
            {param value: 'multiple' /}
          {/call}
          {sp}
          {$entry.multiple.get}
          {sp}
          {annotate($entry.combined_count_unit)}
          {sp}
        </div>
      {/if}

      {if $entry.multiuse.present}
        <div class="counted">
          {call dma.value.extension}
            {param value: 'multiuse' /}
          {/call}
          {sp}
          {$entry.multiuse.get}
          {sp}
        </div>
      {/if}

      {if $entry.wearable}
        <div class="wearable">
          {call dma.value.extension}
            {param value: 'wearable' /}
          {/call}
          {sp}
          {annotate($entry.combined_slot)}
          {sp}
          <div class="stack">
            <div>
              {annotate($entry.combined_don)}/{annotate($entry.don_hastily)}
            </div>
            <div>
              {annotate($entry.combined_remove)}
           </div>
          </div>
        </div>
      {/if}

      {if $entry.container}
        <div class="container">
          {call dma.value.extension}
            {param value: 'container' /}
          {/call}
          {sp}
          {annotate($entry.combined_capacity)} {annotate($entry.combined_state)}
        </div>
      {/if}

      {if $entry.light}
        <div class="light">
          {call dma.value.extension}
            {param value: 'light' /}
          {/call}
          {sp}
          {annotate($entry.combined_light_shape)}

          <div class="stack lead">
            <div>
              {annotate($entry.combined_bright_light)}
            </div>
            <div>
              {annotate($entry.combined_shadowy_light)}
            </div>
          </div>
        </div>
      {/if}

      {if $entry.timed}
        <div class="timed">
          {call dma.value.extension}
            {param value: 'timed' /}
          {/call}
          {sp}
          {$entry.time_left.get.to_short_string}
        </div>
      {/if}

      {if $entry.commodity}
        <div class="commodity">
          {call dma.value.extension}
            {param value: 'commodity' /}
          {/call}
          {sp}
          {annotate($entry.combined_length)}
          {annotate($entry.combined_area)}
        </div>
      {/if}
    </div>

    {if $entry.weapon}
      <div class="statistics-line weapon">
        {call dma.value.extension}
          {param value: 'weapon' /}
        {/call}
        <div class="value">
          {annotate($entry.combined_damage)}
          {if $entry.combined_secondary_damage.has_value}
            /{annotate($entry.combined_secondary_damage)}
          {/if}
          {sp}
          {if $entry.combined_splash.has_value}
            ({annotate($entry.combined_splash)})
            {sp}
          {/if}
          {annotate($entry.combined_critical)}
          ,{sp}
          {annotate($entry.combined_weapon_type)}
          ,{sp}
          {annotate($entry.combined_proficiency)}
          ,{sp}
          {annotate($entry.combined_weapon_style)}
          ,{sp}
          {annotate($entry.combined_reach)}/{annotate($entry.combined_range)}
        </div>
      </div>
    {/if}

    {if $entry.armor}
      <div class="statistics-line armor">
        {call dma.value.extension}
          {param value: 'armor' /}
        {/call}
        <div class="value">
          AC {annotate($entry.combined_armor_bonus)}
          {sp}
          {annotate($entry.combined_armor_type)}
          , max dex {annotate($entry.combined_max_dex)}
          , check {annotate($entry.combined_check_penalty)}
          , arcane {annotate($entry.combined_arcane_failure)}
          {if $entry.combined_slow_speed.has_value
              or $entry.combined_fast_speed.has_value}
            , speed {annotate($entry.combined_slow_speed)}
            /{annotate($entry.combined_fast_speed)}
          {/if}
        </div>
      </div>
    {/if}
  </div>
{/template}

/**
 * Format the item name.
 * 
 * @param entry the item to format for
 */
{template .name}
  {if $ij.isDM}
    {$entry.DM_name}
    {if $entry.player_name and $entry.DM_name != $entry.player_name}
      {sp}[{$entry.player_name}]
    {/if} 
  {else}
    {$entry.player_name}
  {/if}
  {sp}({$entry.name})
{/template}

