/* ****************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/*
 * The templates for editing values.
 */
{namespace dma.edit autoescape="deprecated-contextual"}

/** 
 * The editable card for an entry.
 * 
 * @param entry  The entry to edit
 * @param type   The type of entry edited
 * @param id     The id of the card.
 * @param values The editable value content
 * @param create Whether to create a new entry.
 */
{template .entry}
  <div class="edit {$type}" id="{escape($id)}">
    <div class="scroll">
      <div class="values">
        {$values |noescape}
      </div>
    
      <div class="actions-spacer"></div>
    </div> // scroll
    
    {call dma.edit.actions}
      {param id: escape($id) /}
      {param key: $entry.key /}
      {param create: $create /}
    {/call}
    
  </div>  
{/template}

/**
 * An editable value.
 * 
 * @param label    The label text.
 * @param value    The value contents.
 * @param color    The decoration color.
 */
{template .generic_value}
  <div class="value">
    {call .label}
      {param text: $label /}
      {param color: $color /}
    {/call}
    {$value |noescape}
  </div>
{/template}

/**
 * An editable value.
 * 
 * @param name     The name of the value.
 * @param label    The label text.
 * @param value    The value contents.
 * @param validate The type of validation to be done.
 * @param color    The decoration color.
 */
{template .value}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value}
      {call .field}
        {param markup}
          {call .field_input}
            {param name: $name /}
            {param value: $value /}
            {param validate: $validate /}
          {/call}
        {/param}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * An editable multiline text value.
 * 
 * @param name     The name of the value.
 * @param label    The label text.
 * @param value    The value contents.
 * @param validate The type of validation to be done.
 * @param color    The decoration color.
 */
{template .value_text}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value}
      {call .field_text}
        {param name: $name /}
        {param value: $value /}
        {param validate: $validate /}
      {/call}
    {/param}
    {/call}
{/template}

/**
 * An editable selection value.
 *
 * @param name     The name of the value.
 * @param label    The label text.
 * @param value    The value contents.
 * @param choices  The possible chocies.
 * @param color    The decoration color.
 */
{template .value_selection}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value}
      {call .field_selection}
        {param name: $name /}
        {param value: $value /}
        {param choices: $choices /}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * An editable flag value.
 *
 * @param name     The name of the value.
 * @param label    The label text.
 * @param value    The value contents.
 * @param color    The decoration color.
 */
{template .value_flag}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value}
      {call .field_flag}
        {param name: $name /}
        {param value: $value /}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * An editable list value.
 * 
 * @param name     The name of the value.
 * @param label    The label text.
 * @param values   The value contents.
 * @param validate The validation for values.
 * @param color    The decoration color.
 * @param? autocomplete the url for autocompleting this field
 */
{template .value_list}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value}
      {call .field_list}
        {param name: $name /}
        {param values: $values /}
        {param validate: $validate /}
        {param autocomplete: $autocomplete /}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * The name for an editable value.
 * 
 * @param text The label text.
 * @param color The color of the decoration
 */
{template .label}
  <div class="label">
    <div class="label-text">
      {$text}:
      <div class="label-decoration"
           style="background: -webkit-linear-gradient(left, transparent 0%, 
                              {$color} 100%)">
      </div>
    </div>
  </div>
{/template}

/**
 * Format a field for editing.
 * 
 * @param markup the markup for the field
 * @param? class  the class for the field, if any
 */
{template .field}
  <div class="field{if $class} {$class}{/if}">
    {$markup |noescape}
  </div>
{/template}

/**
 * The field for editing a simple value.
 * 
 * @param name     The name of the value.
 * @param value    The value contents.
 * @param validate The type of validation to be done.
 * @param? inList  Is the value part of a list of values
 * @param? class   special classes to set 
 * @param? caption special label to set
 * @param? autocomplete the url for autocompleting this field
 * @param? width        the width style of the field
 */
{template .field_input}
  <div class="input-wrapper field{if $class} {$class}{/if}
              {if $width} width{/if}"
       {if $width} style="width: {$width} !important;"{/if}>
    <input value="{$value}" name="{$name}" validate="{$validate}" 
           {if $autocomplete} dma-autocomplete="{$autocomplete}"{/if}
           onkeyup="window.form.validate(this);
               {if $inList}edit.maybeInsertLine(event, 
                                                this.parentNode.parentNode);
               {/if}">
    </input>
    {if $caption}
      <div class="input-label">{$caption}</div>
    {/if}
  </div>
{/template}

/**
 * The field for editing a multiline text value.
 * 
 * @param name     The name of the value.
 * @param value    The value contents.
 * @param validate The type of validation to be done.
 */
{template .field_text}
  {call .field}
    {param markup}
      <textarea class='field' name='{$name}' rows="10" 
                validate='{$validate}' 
                onkeyup='window.form.validate(this)'>
        {$value}        
      </textarea>
    {/param}
  {/call}
{/template}

/**
 * The field for editing a selection value.
 *
 * @param name     The name of the value.
 * @param value    The value contents.
 * @param choices  The possible chocies to select from.
 * @param? class   The class to use for this field
 * @param? width   the width of the field
 */
{template .field_selection}
  {call .field}
    {param class: $class /}
    {param width: $width /}
    {param markup}
      <select name="{$name}" onkeyup="window.form.validate(this)">
        {foreach $choice in $choices}
          <option value="{$choice}"{if $choice == $value} selected{/if}>
            {$choice}
          </option>
        {/foreach}
      </select>
    {/param}
  {/call}
{/template}

/**
 * The field for editing a flag value.
 *
 * @param name     The name of the value.
 * @param value    The value contents.
 * @param? class   The class to use for this field
 * @param? width   the width of the field
 */
{template .field_flag}
  {call .field}
    {param class: $class /}
    {param width: $width /}
    {param markup}
      <input name="{$name}"
        onclick="this.checked ? this.value='true' : this.value='false'"
        type="checkbox" {if $value}checked{/if}/>
    {/param}
  {/call}
{/template}

/**
 * The field for editing a list value.
 * 
 * @param name     The name of the value.
 * @param values   The value contents.
 * @param validate How the values are validated
 * @param? autocomplete the url for autocompleting this field
 */
{template .field_list}
  {call .field}
    {param markup}
      {foreach $value in $values}
        {call .field_list_input_line}
          {param name: $name /}
          {param value: $value /}
          {param validate: $validate /}
          {param autocomplete: $autocomplete /}
        {/call}
      {ifempty}
        {call .field_list_input_line}
          {param name: $name /}
          {param value: '' /}
          {param validate: $validate /}
          {param autocomplete: $autocomplete /}
        {/call}
      {/foreach}
    {/param}
  {/call}
{/template}

/**
 * A list field value.
 * 
 * @param field the markup for the edit field
 */
{template .field_list_line}
  <div class="line">
    {$field |noescape}
    <div class="sprite edit-list-add" title="Add"
         onclick="edit.insertLine(this.parentNode)"></div>
    <div class="sprite edit-list-remove" title="Remove"
         onclick="edit.removeLine(this.parentNode)"></div>
  </div>  
{/template}

/**
 * A list field value.
 * 
 * @param name the name of the field
 * @param value the value of the field
 * @param validate how to validate the field 
 * @param? autocomplete the url for autocompleting this field
 */
{template .field_list_input_line}
  {call .field_list_line}
    {param field}
      {call .field_input}
        {param name: $name /}
        {param value: $value /}
        {param validate: $validate /}
        {param inList: true /}
        {param autocomplete: $autocomplete /}
      {/call}
    {/param}
  {/call}
{/template}

/**
 * Format a list line with multiple values.
 * 
 * @param values the information about the values to edit 
 * @param? class  the class to use for the fields
 */
{template .field_list_multiple}
  {call dma.edit.field_list_line}
    {param field}
      {foreach $value in $values}
        {if $value.type and $value.type == 'selection'}
          {call .field_selection}
            {param name: $value.name /}
            {param value: $value.value /}
            {param choices: $value.choices /}      
            {param class: $class ? $class : 'field' + length($values) /}
          {/call}
        {else}
          {call .field_input}
            {param name: $value.name /}
            {param validate: $value.validate /}
            {param value: $value.value /}
            {param class: $class ? $class : 'field' + length($values) /}
            {param caption: $value.caption /}
            {param inList: true /}
            {param autocomplete: $value.autocomplete /}
          {/call}
        {/if}
      {/foreach}
    {/param}
  {/call}
{/template}

/**
 * The actions when editing.
 * 
 * @param id      the id of the element with all the fields.
 * @param key     the key to the entry to save
 * @param create  whether to create a new entry or not
 */
{template .actions}
  <div class="actions">
    <div class="buttons">
      <div class="move">
        <div class="action sprite large save" title="Save"
             onclick="edit.save
                        ('{$key}'.replace(/\/[^\/]*$/, '/' + 
                                          $('#{$id} input[name=name]').val()), 
                         '{$id}', {$create})">
        </div>
        <div class="action sprite large revert" title="Revert"
             onclick="edit.cancel('{$id}')">
        </div>
      </div>
    </div>
  </div>  
{/template}
