/* ****************************************************************************
 * Copyright (c) 2002-2012 Peter 'Merlin' Balsiger and Fred 'Mythos' Dobler
 * All rights reserved
 *
 * This file is part of Dungeon Master Assistant.
 *
 * Dungeon Master Assistant is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Dungeon Master Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Dungeon Master Assistant; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *****************************************************************************/

/*
 * The templates for editing values.
 */
{namespace dma.edit}

/** The editable card for an entry. */
{template .entry}
  {@param entry: [key: string]}
  {@param type: string}
  {@param id: string}
  {@param values: html}
  {@param create: bool}
  <div class="edit {$type}" id="{escape($id)}">
    <div class="scroll">
      <div class="values">
        {$values}
      </div>
    
      <div class="actions-spacer"></div>
    </div> // scroll
    
    {call dma.edit.actions}
      {param id: escape($id) /}
      {param key: $entry.key /}
      {param create: $create /}
    {/call}
    
  </div>  
{/template}

/** An editable value. */
{template .generic_value}
  {@param label: string}
  {@param value: any}
  {@param color: string}
  <div class="value">
    {call .label}
      {param text: $label /}
      {param color: $color /}
    {/call}
    {$value}
  </div>
{/template}

/** An editable value. */
{template .value}
  {@param name: string}
  {@param label: string}
  {@param value: any}
  {@param validate: string}
  {@param color: string}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value kind="html"}
      {call .field}
        {param markup kind="html"}
          {call .field_input}
            {param name: $name /}
            {param value: $value /}
            {param validate: $validate /}
          {/call}
        {/param}
      {/call}
    {/param}
  {/call}
{/template}

/** An editable multiline text value. */
{template .value_text}
  {@param name: string}
  {@param label: string}
  {@param value: any}
  {@param validate: string}
  {@param color: string}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value kind="html"}
      {call .field_text}
        {param name: $name /}
        {param value: $value /}
        {param validate: $validate /}
      {/call}
    {/param}
    {/call}
{/template}

/** An editable selection value. */
{template .value_selection}
  {@param name: string}
  {@param label: string}
  {@param value: any}
  {@param choices: list<string>}
  {@param color: string}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value kind="html"}
      {call .field_selection}
        {param name: $name /}
        {param value: $value /}
        {param choices: $choices /}
      {/call}
    {/param}
  {/call}
{/template}

/** An editable flag value. */
{template .value_flag}
  {@param name: string}
  {@param label: string}
  {@param value: any}
  {@param color: string}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value kind="html"}
      {call .field_flag}
        {param name: $name /}
        {param value: $value /}
      {/call}
    {/param}
  {/call}
{/template}

/** An editable list value. */
{template .value_list}
  {@param name: string}
  {@param label: string}
  {@param values: list<html>}
  {@param validate: string}
  {@param color: string}
  {@param? autocomplete: string}
  {call .generic_value}
    {param label: $label /}
    {param color: $color /}
    {param value kind="html"}
      {call .field_list}
        {param name: $name /}
        {param values: $values /}
        {param validate: $validate /}
        {param autocomplete: $autocomplete /}
      {/call}
    {/param}
  {/call}
{/template}

/** The name for an editable value. */
{template .label}
  {@param text: string}
  {@param color: string}
  <div class="label">
    <div class="label-text">
      {$text}:
      <div class="label-decoration"
           style="background: -webkit-linear-gradient(left, transparent 0%, 
                              {$color} 100%)">
      </div>
    </div>
  </div>
{/template}

/** Format a field for editing. */
{template .field}
  {@param markup: html}
  {@param? class: string}
  <div class="field{if $class} {$class}{/if}">
    {$markup}
  </div>
{/template}

/** The field for editing a simple value. */
{template .field_input}
  {@param name: string}
  {@param value: any}
  {@param validate: string}
  {@param? inList: bool}
  {@param? class: string}
  {@param? caption: string}
  {@param? autocomplete: string}
  {@param? width: string}
  <div class="input-wrapper field{if $class} {$class}{/if}
              {if $width} width{/if}"
       {if $width} style="width: {$width} !important;"{/if}>
    <input value="{$value}" name="{$name}" validate="{$validate}" 
           {if $autocomplete} dma-autocomplete="{$autocomplete}"{/if}
           onkeyup="window.form.validate(this);
               {if $inList}edit.maybeInsertLine(event, 
                                                this.parentNode.parentNode);
               {/if}">
    </input>
    {if $caption}
      <div class="input-label">{$caption}</div>
    {/if}
  </div>
{/template}

/** The field for editing a multiline text value. */
{template .field_text}
  {@param name: string}
  {@param value: any}
  {@param validate: string}
  {call .field}
    {param markup kind="html"}
      <textarea class='field' name='{$name}' rows="10" 
                validate='{$validate}' 
                onkeyup='window.form.validate(this)'>
        {$value}        
      </textarea>
    {/param}
  {/call}
{/template}

/** The field for editing a selection value. */
{template .field_selection}
  {@param name: string}
  {@param value: any}
  {@param choices: list<string>}
  {@param? class: string}
  {@param? width: string}
  {call .field}
    {param class: $class /}
    {param width: $width /}
    {param markup kind="html"}
      <select name="{$name}" onkeyup="window.form.validate(this)">
        {foreach $choice in $choices}
          <option value="{$choice}"{if $choice == $value} selected{/if}>
            {$choice}
          </option>
        {/foreach}
      </select>
    {/param}
  {/call}
{/template}

/** The field for editing a flag value. */
{template .field_flag}
  {@param name: string}
  {@param value: any}
  {@param? class: string}
  {@param? width: string}
  {call .field}
    {param class: $class /}
    {param width: $width /}
    {param markup kind="html"}
      <input name="{$name}"
        onclick="this.checked ? this.value='true' : this.value='false'"
        type="checkbox" {if $value}checked{/if}/>
    {/param}
  {/call}
{/template}

/** The field for editing a list value. */
{template .field_list}
  {@param name: string}
  {@param values: list<html>}
  {@param validate: string}
  {@param? autocomplete: string}
  {call .field}
    {param markup kind="html"}
      {foreach $value in $values}
        {call .field_list_input_line}
          {param name: $name /}
          {param value: $value /}
          {param validate: $validate /}
          {param autocomplete: $autocomplete /}
        {/call}
      {ifempty}
        {call .field_list_input_line}
          {param name: $name /}
          {param value: '' /}
          {param validate: $validate /}
          {param autocomplete: $autocomplete /}
        {/call}
      {/foreach}
    {/param}
  {/call}
{/template}

/** A list field value. */
{template .field_list_line}
  {@param field: html}
  <div class="line">
    {$field}
    <div class="sprite edit-list-add" title="Add"
         onclick="edit.insertLine(this.parentNode)"></div>
    <div class="sprite edit-list-remove" title="Remove"
         onclick="edit.removeLine(this.parentNode)"></div>
  </div>  
{/template}

/** A list field value. */
{template .field_list_input_line}
  {@param name: string}
  {@param value: any}
  {@param validate: string}
  {@param? autocomplete: string}
  {call .field_list_line}
    {param field kind="html"}
      {call .field_input}
        {param name: $name /}
        {param value: $value /}
        {param validate: $validate /}
        {param inList: true /}
        {param autocomplete: $autocomplete /}
      {/call}
    {/param}
  {/call}
{/template}

/** Format a list line with multiple values. */
{template .field_list_multiple}
  {@param values: ?}
  {@param? class: string}
  {call dma.edit.field_list_line}
    {param field kind="html"}
      {foreach $value in $values}
        {if $value.type and $value.type == 'selection'}
          {call .field_selection}
            {param name: $value.name /}
            {param value: $value.value /}
            {param choices: $value.choices /}      
            {param class: $class ? $class : 'field' + length($values) /}
          {/call}
        {else}
          {call .field_input}
            {param name: $value.name /}
            {param validate: $value.validate /}
            {param value: $value.value /}
            {param class: $class ? $class : 'field' + length($values) /}
            {param caption: $value.caption /}
            {param inList: true /}
            {param autocomplete: $value.autocomplete /}
          {/call}
        {/if}
      {/foreach}
    {/param}
  {/call}
{/template}

/** The actions when editing. */
{template .actions}
  {@param id: string}
  {@param key: string}
  {@param create: bool}
  <div class="actions">
    <div class="buttons">
      <div class="move">
        <div class="action sprite large save" title="Save"
             onclick="edit.save
                        ('{$key}'.replace(/\/[^\/]*$/, '/' + 
                                          $('#{$id} input[name=name]').val()), 
                         '{$id}', {if $create}true{else}false{/if})">
        </div>
        <div class="action sprite large revert" title="Revert"
             onclick="edit.cancel('{$id}')">
        </div>
      </div>
    </div>
  </div>  
{/template}
