<?xml version="1.0" ?>

<project name="jDMA" default="compile" basedir=".">

  <!-- completely ignore the classpath set in the environment -->
  <property name="build.sysclasspath" value="ignore" />

  <!-- general project description -->
  <description>
    The Dungeon Master Assitant (DMA) is a tool for Dungeon Masters (DMs) and
    eventually players of the Dungeon &amp; Dragons roleplaying game.

    It's main purpose is to provide a way to store, manage and compute all
    necessary information about an ongoing campaign (e.g. PCs, NPCs, monsters,
    items, spells, ...).
  </description>

  <!-- local valules -->
  <property file="build.properties.${os.name}" />
  <property file="build.properties" />
  <property name="version" value="astraldeva" />

  <!-- Google App Engine -->
  <property name="gae.dir" location="../../appengine-java-sdk-1.8.0" />
  <import file="${gae.dir}/config/user/ant-macros.xml" />

  <!-- constants for the directory structure -->
  <property name="source.dir"     location="java"                            />
  <property name="build.dir"      location="build"                           />
  <property name="build.test.dir" location="${build.dir}/test"               />
  <property name="war.dir"        location="${build.dir}/war"                />
  <property name="webinf.dir"     location="${war.dir}/WEB-INF"              />
  <property name="classes.dir"    location="${build.dir}/classes"            />
  <property name="dist.dir"       location="dist"                            />
  <property name="doc.dir"        location="doc"                             />
  <property name="api.dir"        location="${doc.dir}/api"                  />
  <property name="lib.dir"        location="lib"                             />
  <property name="lib.build.dir"  location="${lib.dir}/build"                />
  <property name="lib.test.dir"   location="${lib.dir}/test"                 />
  <property name="resources.dir"  location="resources"                       />
  <property name="files.dir"      location="${resources.dir}/files"          />
  <property name="files-int.dir"  location="${resources.dir}/files-internal" />
  <property name="coverage.dir"   location="${build.dir}/coverage"           />
  <property name="coverage.instr.dir" location="${coverage.dir}/instr"       />
  <property name="dma.dir"        location="../DnD/Information"              />
  <property name="tools.dir"      location="tools"                           />
  <property name="findbugs.dir"   location="${tools.dir}/findbugs-2.0.2"     />
  <property name="jetty.version"  value="8.0.1.v20110908"                    />

  <!-- other values -->
  <property name="classpath.orig"       value=".classpath" />
  <property name="test.class"           value="test.All"   />
  <property name="warnings.lint"        value="all"        />
  <property name="warnings.deprecation" value="on"         />
  <property name="check.dir"          value="${source.dir}/net/ixitxachitls/" />
  <property name="test.classes"         value="**/*$Test.class" />
  <property name="bugs.classes"         value="${classes.dir}" />


  <!-- for checkstyle -->
  <path id="checkstyle.classpath">
    <pathelement location="${classes.dir}" />
    <pathelement location="${lib.build.dir}/checkstyle-5.6-all.jar"  />
    <pathelement location="${lib.dir}/servlet-api-2.5.jar" />
    <pathelement location="${lib.dir}/servlet-api-3.0.jar" />
  </path>

  <taskdef resource="checkstyletask.properties"
           classpathref="checkstyle.classpath" />

  <!-- for emma -->
  <path id="emma.instr.classpath">
    <pathelement location="${classes.dir}" />
  </path>
  <path id="emma.classpath" >
    <pathelement location="${lib.build.dir}/emma.jar"     />
    <pathelement location="${lib.build.dir}/emma_ant.jar" />
  </path>

  <taskdef resource="emma_ant.properties" classpathref="emma.classpath" />

  <!-- find bugs -->
  <path id="findbugs.classpath" >
    <pathelement location="${lib.build.dir}/findbugs-ant.jar"     />
  </path>

  <taskdef name="findbugs" classpathref="findbugs.classpath"
           classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />

  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${lib.build.dir}/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <!-- classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}" />
    <pathelement location="${resources.dir}" />
    <!-- guava -->
    <pathelement location="${lib.dir}/guava-14.0-rc1.jar" />
    <!-- for testing -->
    <pathelement location="${lib.test.dir}/junit-4.8.2.jar" />
    <pathelement location="${lib.test.dir}/cglib-nodep-2.2.jar" />
    <pathelement location="${lib.test.dir}/objenesis-1.2.jar" />
    <pathelement location="${lib.test.dir}/easymock-3.0.jar" />
    <pathelement location="${lib.test.dir}/test.jar" />
    <pathelement location="${lib.test.dir}/appengine-api-labs.jar" />
    <pathelement location="${lib.test.dir}/appengine-api-stubs.jar" />
    <pathelement location="${lib.test.dir}/appengine-testing.jar" />
    <!-- soy -->
    <pathelement location="${lib.dir}/soy-2012-12-21.jar" />
    <!-- itext -->
    <!-- not compatible with ujac
    <pathelement location="${lib.dir}/iText-5.0.6.jar" /> -->
    <pathelement location="${lib.dir}/iText.jar" />
    <pathelement location="${lib.dir}/ujac.jar" />
    <pathelement location="${lib.dir}/commons-logging-1.1.1.jar" />
    <!-- jetty -->
    <pathelement location="${lib.dir}/jetty-continuation-${jetty.version}.jar"/>
    <pathelement location="${lib.dir}/jetty-http-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-io-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-jmx-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-rewrite-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-security-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-server-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-servlet-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-servlets-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-util-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-webapp-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/jetty-xml-${jetty.version}.jar" />
    <pathelement location="${lib.dir}/servlet-api-3.0.jar" />
    <!-- mail -->
    <pathelement location="${lib.dir}/mail.jar" />
    <pathelement location="${lib.dir}/activation.jar" />
    <!-- java annotations -->
    <pathelement location="${lib.dir}/jsr305.jar" />
    <!-- somehow required probably because checkstyle does not handle -->
    <!-- build.sysclasspath... -->
    <pathelement location="${lib.build.dir}/checkstyle-5.6-all.jar"  />
    <!-- cassandra
    <pathelement location="${lib.dir}/apache-cassandra-0.6.0-rc1.jar" />
    <pathelement location="${lib.dir}/libthrift-r917130.jar" />
    <pathelement location="${lib.dir}/slf4j-api-1.5.8.jar" />
    <pathelement location="${lib.dir}/slf4j-log4j12-1.5.8.jar" />
    <pathelement location="${lib.dir}/log4j-1.2.14.jar" />
    -->
    <!-- Google App Engine -->
    <fileset dir="${gae.dir}/lib">
      <include name="shared/**/*.jar" />
    </fileset>
    <pathelement location="${lib.dir}/appengine-remote-api.jar" />
    <pathelement location="${lib.dir}/appengine-api.jar" />
  </path>

  <!-- define also as property for printing -->
  <property name="classpath" refid="classpath" />

  <!-- special treatment for windows -->
  <condition property="windows">
    <os family="windows" />
  </condition>

  <!-- prepare the building -->
  <target name="prepare" description="prepare building of the project"
          depends="prepare-windows, prepare-non-windows">
  </target>

  <target name="prepare-general"
          description="general preparation steps for all os'">
    <tstamp>
      <format property="today.file" pattern="yyyy-MM-dd" locale="en"/>
      <format property="today" pattern="yyyy-MM-dd HH:mm:ss" locale="en"/>
    </tstamp>
    <mkdir dir="${build.dir}" />
    <mkdir dir="${war.dir}" />
    <mkdir dir="${war.dir}/static" />
    <mkdir dir="${war.dir}/icons" />
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${webinf.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${coverage.dir}" />
    <property name="plugin.destination" value="${dist.dir}" />
    <property name="project.stem"
              value="${project.name}-${project.version}-${today.file}" />
    <copy todir="${webinf.dir}/lib" flatten="true">
      <fileset dir="${gae.dir}/lib/user">
        <include name="**/*.jar" />
      </fileset>
      <fileset dir="${lib.dir}">
        <include name="*.jar" />
        <exclude name="**/jetty-*.jar" />
      </fileset>
    </copy>
    <copy todir="${webinf.dir}" flatten="true">
      <fileset dir="${resources.dir}/WEB-INF">
        <include name="*.xml" />
      </fileset>
      <fileset dir="${resources.dir}/WEB-INF">
        <include name="*.properties" />
      </fileset>
    </copy>
    <!-- html files are rendered using the page renderer, thus we use htm-->
    <!-- for really static files. -->
    <copy todir="${war.dir}/static" flatten="false">
      <fileset dir="${resources.dir}/static">
        <include name="*.htm" />
      </fileset>
    </copy>
    <copy file="${resources.dir}/icons/favicon.png"
          tofile="${war.dir}/favicon.ico" />
    <copy file="${resources.dir}/text/robots.txt"
          tofile="${war.dir}/robots.txt" />
    <copy todir="${war.dir}/icons" flatten="false">
      <fileset dir="${resources.dir}/icons">
        <include name="**/*.png" />
        <include name="**/*.gif" />
        <include name="**/*.jpeg" />
        <exclude name="icons.png" />
        <exclude name="icons-large.png" />
      </fileset>
    </copy>
    <copy todir="${classes.dir}/dma" flatten="false">
      <fileset dir="dma">
        <include name="**/*.dma" />
      </fileset>
    </copy>
  </target>

  <target name="prepare-non-windows" depends="prepare-general"
          description="preparation steps for non windows machines"
          unless="windows">
    <symlink link="${webinf.dir}/classes" resource="${classes.dir}"
             overwrite="Yes" />
    <symlink link="${classes.dir}/css" resource="${resources.dir}/css"
             overwrite="Yes" />
    <symlink link="${classes.dir}/fonts" resource="${resources.dir}/fonts"
             overwrite="Yes" />
    <symlink link="${classes.dir}/icons" resource="${resources.dir}/icons"
             overwrite="Yes" />
    <symlink link="${war.dir}/js" resource="${resources.dir}/js"
             overwrite="Yes" />
    <symlink link="${war.dir}/soy" resource="${resources.dir}/soy"
             overwrite="Yes" />
  </target>

  <target name="prepare-windows" depends="prepare-general"
          description="preparation steps for windows machines"
          if="windows">
    <mkdir dir="${webinf.dir}/classes" />
    <mkdir dir="${classes.dir}/css" />
    <mkdir dir="${classes.dir}/fonts" />
    <mkdir dir="${classes.dir}/icons" />
    <mkdir dir="${war.dir}/js" />
    <copy todir="${webinf.dir}/classes" flatten="false">
      <fileset dir="${classes.dir}">
        <include name="**/*" />
      </fileset>
    </copy>
    <copy todir="${classes.dir}/css" flatten="false">
      <fileset dir="${resources.dir}/css">
        <include name="**/*.css" />
      </fileset>
    </copy>
    <copy todir="${classes.dir}/fonts" flatten="false">
      <fileset dir="${resources.dir}/fonts">
        <include name="**/*.ttf" />
      </fileset>
    </copy>
    <copy todir="${classes.dir}/icons" flatten="false">
      <fileset dir="${resources.dir}/icons">
        <include name="**/*" />
      </fileset>
    </copy>
    <copy todir="${war.dir}/js" flatten="false">
      <fileset dir="${resources.dir}/js">
        <include name="**/*.js" />
      </fileset>
    </copy>
    <copy todir="${war.dir}/soy" flatten="false">
      <fileset dir="${resources.dir}/soy">
        <include name="**/*.soy" />
      </fileset>
    </copy>
  </target>

  <!-- show the internal values -->
  <target name="show" depends="prepare"
          description="show the internal variables used for all targets">
    <echo>
      project:                   ${project.name}
      version:                   ${project.version}
      stem:                      ${project.stem}

      os name:                   ${os.name}
      os version:                ${os.version}
      os arch:                   ${os.arch}

      main directory:            ${basedir}
      source directory:          ${source.dir}
      build directory:           ${build.dir}
      classes directory:         ${classes.dir}
      distribution directory:    ${dist.dir}
      document directory:        ${doc.dir}
      API directory:             ${api.dir}
      library directory:         ${lib.dir}
      environment setting:       ${cmd.env}

      eclipse home               ${eclipse.dir}

      classpath:                 ${classpath} (${build.sysclasspath})
    </echo>
  </target>

  <!-- compile without any warnings -->
  <target name="nw" description="compile without any warnings">
    <antcall target="compile">
      <param name="warnings.lint" value="none" />
      <param name="warnings.deprecation" value="off" />
    </antcall>
  </target>

  <!-- compile the whole project -->
  <target name="compile" depends="prepare"
          description="compile all the source files of the project">
    <javac srcdir="${source.dir}" destdir="${classes.dir}"
           deprecation="${warnings.deprecation}"
           debug="on" optimize="on" encoding="utf-8"
           debuglevel="lines,vars,source" source="1.7">
      <classpath>
        <path refid="classpath" />
      </classpath>
      <compilerarg line="-Xlint:${warnings.lint}"/>
    </javac>
    <copy todir="${classes.dir}">
      <fileset dir="${source.dir}" excludes="**/*.java" />
    </copy>
  </target>

  <target name="gae" depends="compile,icons"
      description="Starts the development server.">
    <dev_appserver war="${war.dir}" port="8888">
      <options>
        <arg value="--jvm_flag=-Xmx1024m"/>
        <arg value="--jvm_flag=-Dappengine.user.timezone.impl=UTC"/>
        <arg value="--jvm_flag=-Dappengine.user.timezone=UTC"/>
        <arg value="--jvm_flag=-Dsun.io.serialization.extendedDebugInfo=true"/>
      </options>
    </dev_appserver>
  </target>

  <target name="gae-debug" depends="compile,icons"
      description="Starts the development server.">
    <dev_appserver war="${war.dir}" port="8888">
      <options>
        <arg value="--jvm_flag=-Xmx512m"/>
        <arg value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" />
      </options>
    </dev_appserver>
  </target>

  <target name="gae-update" depends="compile,icons"
          description="Uploads the application to App Engine.">
    <replace file="${war.dir}/WEB-INF/appengine-web.xml"
             token="&lt;application&gt;jdmaixit-dev&lt;/application&gt;"
             value="&lt;application&gt;jdmaixit-hrd&lt;/application&gt;" />
    <replaceregexp file="${war.dir}/WEB-INF/appengine-web.xml"
             match="&lt;version&gt;.*&lt;/version&gt;"
             replace="&lt;version&gt;${version}&lt;/version&gt;" />
    <appcfg action="update" war="${war.dir}" />
  </target>

  <target name="gae-update-dev" depends="compile"
          description="Uploads the application to App Engine.">
    <replace file="${war.dir}/WEB-INF/appengine-web.xml"
             token="&lt;application&gt;jdmaixit-hrd&lt;/application&gt;"
             value="&lt;application&gt;jdmaixit-dev&lt;/application&gt;" />
    <replaceregexp file="${war.dir}/WEB-INF/appengine-web.xml"
             match="&lt;version&gt;.*&lt;/version&gt;"
             replace="&lt;version&gt;${version}&lt;/version&gt;" />
    <appcfg action="update" war="${war.dir}" />
  </target>

  <target name="gae-update_indexes" depends="compile"
          description="Uploads the datastore index config to App Engine.">
    <appcfg action="update_indexes" war="${war.dir}" />
  </target>

  <target name="gae-rollback" depends="compile"
      description="Rolls back an interrupted application update.">
    <appcfg action="rollback" war="${war.dir}" />
  </target>

  <target name="gae-logs"
      description="Downloads log data from App Engine for the application.">
    <appcfg action="request_logs" war="${war.dir}">
      <options>
        <arg value="--num_days=5"/>
      </options>
      <args>
        <arg value="logs.txt"/>
      </args>
    </appcfg>
  </target>

  <!-- clean everything -->
  <target name="clean-all"
          depends="clean, clean-data, clean-dist, clean-coverage"
          description="call all clean targets" >
  </target>

  <!-- clean the build -->
  <target name ="clean"
          description="clean up the build directories" >
    <delete dir="${classes.dir}" followsymlinks="false" includeemptydirs="true"
            removeNotFollowedSymlinks="true"/>
    <delete>
      <fileset dir="${basedir}" defaultexcludes="no"
               includes="**/*.class, **/*~, **/#*#, **/.#*, **/default.log"/>
    </delete>
  </target>

  <!-- clean the build -->
  <target name ="clean-data"
          description="clean up the build directories" >
    <!-- copy the base data back -->
    <mkdir dir="${webinf.dir}/appengine-generated" />
    <copy todir="${webinf.dir}/appengine-generated">
      <fileset dir="${resources.dir}/WEB-INF/default">
        <include name="*" />
      </fileset>
    </copy>
  </target>

  <!-- clean the distribution directory -->
  <target name="clean-dist" description="clean up dist dir">
    <delete>
      <fileset dir="${dist.dir}" includes="**/*" />
    </delete>
  </target>

  <!-- clean the coverage direactory -->
  <target name="clean-coverage" description="clean up the coverage dir">
    <delete dir="${coverage.dir}"/>
  </target>

  <!-- create the file with the class path -->
  <target name="classpath" depends="prepare"
          description="create a file to set the correct classpath">
    <delete file="${classpath.file}" />
    <copy file="${classpath.orig}.${os.name}" tofile="${classpath.file}">
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>
    <echo>please execute or source file ${classpath.file}</echo>
  </target>

  <!-- start a test -->
  <target name="test" depends="prepare, compile">
    <emma enabled="${emma.enabled}" >
      <instr instrpathref="emma.instr.classpath"
             destdir="${emma.instr.dir}"
             metadatafile="${coverage.dir}/metadata.emma"
             merge="true">
        <filter excludes="net.ixitxachitls.util.NullPointerCheck" />
      </instr>
    </emma>

    <echo>
      Testing classes ${test.classes}...
    </echo>
    <junit fork="no" printsummary="withOutAndErr" haltonerror="true"
           haltonfailure="true" reloading="false">
      <jvmarg value="-ea" /> <!-- enable assertions -->
      <jvmarg value="-Djava.awt.headless=true" /> <!-- no X for awt tests -->
      <jvmarg value="-Dfile.encoding=UTF-8" /> <!-- use utf-8 for tests -->
      <jvmarg value="-Duser.language=en" /> <!-- use en for tests -->
      <jvmarg value="-Duser.region=US" /> <!-- use us for tests -->
      <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
      <jvmarg value="-Demma.coverage.out.merge=true" />
      <classpath>
        <pathelement location="${emma.instr.dir}" />
        <pathelement location="${lib.dir}/appengine-api.jar" />
        <path refid="emma.classpath" />
        <path refid="classpath" />
      </classpath>
      <batchtest>
        <fileset dir="${classes.dir}">
          <include name="${test.classes}"/>
        </fileset>
      </batchtest>
      <formatter usefile="false" type="plain">
      </formatter>
    </junit>

    <emma enabled="${emma.enabled}" >
      <report sourcepath="${source.dir}" >
        <fileset dir="${coverage.dir}" >
          <include name="*.emma" />
        </fileset>

        <txt outfile="${coverage.dir}/coverage.txt" />
        <html outfile="${coverage.dir}/coverage.html" />
      </report>
    </emma>
  </target>

  <!-- create the javadoc api documentation -->
  <target name="javadoc" depends="compile">
    <javadoc sourcepath="${source.dir}" destdir="${api.dir}"
             packagenames="net.ixitxachitls.*" classpathref="classpath"
             version="true" author="true" use="true" access="private"
             source="1.5">
      <tag name="keywords" description="Keywords:"
           scope="methods, constructors, types" enabled="false" />
      <tag name="bugs" description="Bugs:"
           scope="methods, constructors, types" enabled="false" />
      <tag name="to_do" description="To Do:"
           scope="methods, constructors, types" enabled="false" />
      <tag name="file" description="File:" scope="types" />
    </javadoc>
  </target>

  <!-- check the source code -->
  <target name="check" depends=""
          description="check files for various conventions">
    <checkstyle config="${lib.build.dir}/check.xml"
                classpathref="checkstyle.classpath">
      <fileset dir="${check.dir}" includes="**/*.java">
      </fileset>
      <formatter type="plain"                               />
      <formatter type="xml" toFile="build/check_errors.xml" />
    </checkstyle>
  </target>

  <target name="check-quiet" depends=""
          description="check files for various conventions">
    <checkstyle config="${lib.build.dir}/check.xml" failOnViolation="false"
                classpathref="checkstyle.classpath">
      <fileset dir="${check.dir}" includes="**/*.java">
        <exclude name="**/MemoryLogger.java"          />
        <exclude name="**/DuplicateEntry.java"        />
        <exclude name="**/NotFoundEntry.java"         />
        <exclude name="**/PropertyChangeSupport.java" />
      </fileset>
      <formatter type="xml" toFile="build/check_errors.xml" />
    </checkstyle>
  </target>

  <!-- create coverage statistics -->
  <target name="coverage" description="determine test coverage"
          depends="compile">
    <property name="emma.enabled" value="true" />
    <!-- EMMA instr class output directory: -->
    <property name="emma.instr.dir" value="${coverage.instr.dir}" />
    <mkdir dir="${coverage.instr.dir}" />
  </target>

  <!-- create coverage statistics -->
  <target name="coverage2" description="determine test coverage"
          depends="compile">
    <emmajava enabled="true" libclasspathref="emma.classpath"
              fullmetadata="yes" sourcepath="${source.dir}"
              classname="${test.class}" fork="yes" merge="false">
      <txt outfile="${coverage.dir}/coverage-${today.file}.txt" />
      <xml outfile="${coverage.dir}/coverage.xml" />
      <html outfile="${coverage.dir}/coverage-${today.file}.html"  />
      <filter includes="test.All, net.ixitxachitls.*" />

      <jvmarg value="-ea" />
      <arg value="-text" />
      <arg value="${test.class}" />
      <classpath>
        <path refid="classpath" />
      </classpath>
    </emmajava>
  </target>

  <!-- run find bugs on the source -->
  <target name="bugs" depends="compile">
    <findbugs home="${findbugs.dir}" output="text" reportLevel="low"
              excludeFilter="${lib.build.dir}/findbugs.xml">
      <auxClasspath>
        <path refid="classpath" />
      </auxClasspath>
      <sourcePath path="${source.dir}" />
      <class location="${bugs.classes}" />
    </findbugs>
  </target>

  <!-- distribution stuff -->
  <target name="dist" description="Create distribution files"
depends="dist-source,dist-bin,dist-resources,dist-files,dist-files-internal,dist-dma">
    <echo>Don't use this for web!</echo>
  </target>

  <!-- the web server -->
  <target name="web" description="DMA web server" depends="compile">
    <jar jarfile="${dist.dir}/${project.stem}.jar" update="false">
      <fileset dir="${classes.dir}" />
      <manifest>
        <attribute name="Main-Class"
                   value="net.ixitxachitls.dma.server.WebServer" />
        <attribute name="Class-Path"
               value=". resources/ ${project.stem}-resources.jar ${project.name}-${project.version}-resources.jar ${project.stem}-files.jar ${project.name}-${project.version}-files.jar ${project.stem}-files-internal.jar ${project.name}-${project.version}-files-internal.jar jetty-6.1.5.jar jetty-util-6.1.5.jar servlet-api-2.5-6.1.5.jar iText.jar ujac.jar commons-logging.jar" />
      </manifest>
    </jar>
  </target>

  <!-- create the disrtibution source package -->
  <target name="dist-source"
          depends="dist-source-tar, dist-source-zip"
          description="Create a distribution of the source files"/>

  <target name="dist-source-tar" depends="prepare"
          description="Create a tar distribution of the source files">
    <delete file="${dist.dir}/${project.stem}-source.tar.gz" />
    <tar destfile="${dist.dir}/${project.stem}-source.tar.gz"
         basedir="${basedir}"
         includes="${source.dir}/**/*.java,${lib.dir}/**/*"
         compression="gzip" />
  </target>
  <!-- create the distribution source package -->
  <target name="dist-source-zip" depends="prepare"
          description="Create a zip distribution of the source files">
    <delete file="${dist.dir}/${project.stem}-source.zip" />
    <zip destfile="${dist.dir}/${project.stem}-source.zip" basedir="${basedir}"
         includes="${source.dir}/**/*.java,${lib.dir}/**/*"
    />
  </target>

  <!-- create the distribution source package -->
  <target name="dist-bin" depends="compile"
          description="Create a distribution of the binary files">
    <jar jarfile="${dist.dir}/${project.stem}.jar" update="false">
      <fileset dir="${classes.dir}" />
      <manifest>
        <attribute name="Main-Class" value="net.ixitxachitls.dma.cli.CLI" />
        <attribute name="Class-Path"
                   value="${project.stem}-resources.jar ${project.stem}-files.jar ${project.stem}-files-internal.jar" />
      </manifest>
    </jar>
  </target>

  <!-- create the distribution source package -->
  <target name="dist-resources"
          depends="dist-resources-zip, dist-resources-tar, dist-resources-jar"
          description="Create a distribution of the resource files" />

  <target name="dist-resources-tar" depends="prepare"
          description="Create a tar distribution of the resource files">
    <delete file="${dist.dir}/${project.stem}-resources-tar.gz" />
    <tar destfile="${dist.dir}/${project.stem}-resources.tar.gz"
         basedir="${basedir}"
         includes="${resources.dir}/**/*"
         excludes="${files.dir}/**/*,${files-int.dir}/**/*,${resources.dir}/raw/**/*"
         compression="gzip" />
  </target>

  <target name="dist-resources-zip" depends="prepare"
          description="Create a zip distribution of the resource files">
    <delete file="${dist.dir}/${project.stem}-resources.zip" />
    <zip destfile="${dist.dir}/${project.stem}-resources.zip" update="false"
         basedir="${basedir}"
         includes="${resources.dir}/**/*"
         excludes="${files.dir}/**/*,${files-int.dir}/**/*,${resources.dir}/raw/**/*" />
  </target>

  <target name="dist-resources-jar" depends="prepare"
          description="Create a jar distribution of the resource files">
    <jar jarfile="${dist.dir}/${project.stem}-resources.jar" update="false">
      <fileset dir="${resources.dir}"
               excludes="config/**/*,files/**/*,files-internal/**/*,raw/**/*" />
    </jar>
  </target>

  <target name="dist-dma" depends="prepare"
          description="create a jar with all the dma files">
    <jar jarfile="${dist.dir}/${project.stem}-dma.jar" update="false">
      <zipfileset dir="${dma.dir}" includes="**/*.dma" prefix="dma"/>
    </jar>
  </target>

  <!-- create the distribution source package -->
  <target name="dist-files"
          depends="dist-files-tar, dist-files-zip, dist-files-jar"
          description="Create a distribution resource files" />

  <target name="dist-files-tar" depends="prepare"
          description="Create a tar distribution resource files">
    <delete file="${dist.dir}/${project.stem}-files-tar.gz" />
    <tar destfile="${dist.dir}/${project.stem}-files.tar.gz"
         basedir="${basedir}"
         includes="${files.dir}/**/*"
         compression="gzip" />
  </target>
  <target name="dist-files-zip" depends="prepare"
          description="Create a distribution resource files">
    <delete file="${dist.dir}/${project.stem}-files.zip" />
    <zip destfile="${dist.dir}/${project.stem}-files.zip" update="false"
         basedir="${basedir}"
         includes="${files.dir}/**/*" />
  </target>

  <target name="dist-files-jar" depends="prepare"
          description="Create a jar distribution of the files">
    <jar jarfile="${dist.dir}/${project.stem}-files.jar" update="false">
      <zipfileset dir="${files.dir}" prefix="files"/>
    </jar>
  </target>

  <!-- create the distribution source package -->
  <target name="dist-files-internal"
        depends="dist-files-internal-tar,dist-files-internal-zip,dist-files-internal-jar"
          description="Create a distribution resource files" />

  <target name="dist-files-internal-tar" depends="prepare"
          description="Create a distribution resource files">
    <delete file="${dist.dir}/${project.stem}-files-internal-tar.gz" />
    <tar destfile="${dist.dir}/${project.stem}-files-internal.tar.gz"
         basedir="${basedir}"
         includes="${files-int.dir}/**/*"
         compression="gzip" />
  </target>
  <target name="dist-files-internal-zip" depends="prepare"
          description="Create a distribution resource files">
    <delete file="${dist.dir}/${project.stem}-files-internal.zip" />
    <zip destfile="${dist.dir}/${project.stem}-files-internal.zip"
         update="false"
         basedir="${basedir}"
         includes="${files-int.dir}/**/*" />
  </target>

  <target name="dist-files-internal-jar" depends="prepare"
          description="Create a jar distribution of the files">
    <jar jarfile="${dist.dir}/${project.stem}-files-internal.jar"
         update="false">
      <zipfileset dir="${files-int.dir}" prefix="files-internal"/>
    </jar>
  </target>

  <!-- recolor icons -->
  <target name="iconchanges">
    <uptodate property="noiconchanges"
              targetfile="build/war/icons/icons.png">
      <srcfiles file="resources/icons/icons.png" />
      <srcfiles file="resources/icons/icons-large.png" />
    </uptodate>
  </target>

  <target name="icons" depends="prepare,iconchanges"
          description="created colored icons" unless="noiconchanges">
    <exec executable="/opt/local/bin/convert">
      <arg line="( resources/icons/icons.png -alpha extract ) -background white -alpha shape build/war/icons/icons-white.png" />
    </exec>
    <exec executable="/opt/local/bin/convert">
      <arg line="( resources/icons/icons.png -alpha extract ) -background #00006a -alpha shape build/war/icons/icons.png" />
    </exec>
    <exec executable="/opt/local/bin/convert">
      <arg line="( resources/icons/icons.png -alpha extract ) -background #d66a00 -alpha shape build/war/icons/icons-hover.png" />
    </exec>

    <exec executable="/opt/local/bin/convert">
      <arg line="( resources/icons/icons-large.png -alpha extract ) -background white -alpha shape build/war/icons/icons-large-white.png" />
    </exec>
    <exec executable="/opt/local/bin/convert">
      <arg line="( resources/icons/icons-large.png -alpha extract ) -background #00006a -alpha shape build/war/icons/icons-large.png" />
    </exec>
    <exec executable="/opt/local/bin/convert">
      <arg line="( resources/icons/icons-large.png -alpha extract ) -background #d66a00 -alpha shape build/war/icons/icons-large-hover.png" />
    </exec>
  </target>

</project>
